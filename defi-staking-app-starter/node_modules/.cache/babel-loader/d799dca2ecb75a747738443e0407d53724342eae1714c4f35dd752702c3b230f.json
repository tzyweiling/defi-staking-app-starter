{"ast":null,"code":"\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardles.\n *\n */\nimport { BN } from \"bn.js\";\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n}\nexport class BigNumber {\n  constructor(constructorGuard, hex) {\n    logger.checkNew(new.target, BigNumber);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n  fromTwos(value) {\n    return toBigNumber(toBN(this).fromTwos(value));\n  }\n  toTwos(value) {\n    return toBigNumber(toBN(this).toTwos(value));\n  }\n  abs() {\n    if (this._hex[0] === \"-\") {\n      return BigNumber.from(this._hex.substring(1));\n    }\n    return this;\n  }\n  add(other) {\n    return toBigNumber(toBN(this).add(toBN(other)));\n  }\n  sub(other) {\n    return toBigNumber(toBN(this).sub(toBN(other)));\n  }\n  div(other) {\n    const o = BigNumber.from(other);\n    if (o.isZero()) {\n      throwFault(\"division by zero\", \"div\");\n    }\n    return toBigNumber(toBN(this).div(toBN(other)));\n  }\n  mul(other) {\n    return toBigNumber(toBN(this).mul(toBN(other)));\n  }\n  mod(other) {\n    const value = toBN(other);\n    if (value.isNeg()) {\n      throwFault(\"cannot modulo negative values\", \"mod\");\n    }\n    return toBigNumber(toBN(this).umod(value));\n  }\n  pow(other) {\n    const value = toBN(other);\n    if (value.isNeg()) {\n      throwFault(\"cannot raise to negative values\", \"pow\");\n    }\n    return toBigNumber(toBN(this).pow(value));\n  }\n  and(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'and' negative values\", \"and\");\n    }\n    return toBigNumber(toBN(this).and(value));\n  }\n  or(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'or' negative values\", \"or\");\n    }\n    return toBigNumber(toBN(this).or(value));\n  }\n  xor(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'xor' negative values\", \"xor\");\n    }\n    return toBigNumber(toBN(this).xor(value));\n  }\n  mask(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot mask negative values\", \"mask\");\n    }\n    return toBigNumber(toBN(this).maskn(value));\n  }\n  shl(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shl\");\n    }\n    return toBigNumber(toBN(this).shln(value));\n  }\n  shr(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shr\");\n    }\n    return toBigNumber(toBN(this).shrn(value));\n  }\n  eq(other) {\n    return toBN(this).eq(toBN(other));\n  }\n  lt(other) {\n    return toBN(this).lt(toBN(other));\n  }\n  lte(other) {\n    return toBN(this).lte(toBN(other));\n  }\n  gt(other) {\n    return toBN(this).gt(toBN(other));\n  }\n  gte(other) {\n    return toBN(this).gte(toBN(other));\n  }\n  isNegative() {\n    return this._hex[0] === \"-\";\n  }\n  isZero() {\n    return toBN(this).isZero();\n  }\n  toNumber() {\n    try {\n      return toBN(this).toNumber();\n    } catch (error) {\n      throwFault(\"overflow\", \"toNumber\", this.toString());\n    }\n    return null;\n  }\n  toString() {\n    // Lots of people expect this, which we do not support, so check\n    if (arguments.length !== 0) {\n      logger.throwError(\"bigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n    }\n    return toBN(this).toString(10);\n  }\n  toHexString() {\n    return this._hex;\n  }\n  static from(value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      if (value.match(/^-?0x[0-9a-f]+$/i)) {\n        return new BigNumber(_constructorGuard, toHex(value));\n      }\n      if (value.match(/^-?[0-9]+$/)) {\n        return new BigNumber(_constructorGuard, toHex(new BN(value)));\n      }\n      return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n    }\n    if (typeof value === \"number\") {\n      if (value % 1) {\n        throwFault(\"underflow\", \"BigNumber.from\", value);\n      }\n      if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n        throwFault(\"overflow\", \"BigNumber.from\", value);\n      }\n      return BigNumber.from(String(value));\n    }\n    if (typeof value === \"bigint\") {\n      return BigNumber.from(value.toString());\n    }\n    if (isBytes(value)) {\n      return BigNumber.from(hexlify(value));\n    }\n    if (value._hex && isHexString(value._hex)) {\n      return BigNumber.from(value._hex);\n    }\n    if (value.toHexString) {\n      value = value.toHexString();\n      if (typeof value === \"string\") {\n        return BigNumber.from(value);\n      }\n    }\n    return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n  }\n  static isBigNumber(value) {\n    return !!(value && value._isBigNumber);\n  }\n}\n// Normalize the hex string\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  }\n  // If negative, prepend the negative sign to the normalized positive value\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1);\n    // Cannot have mulitple negative signs (e.g. \"--0x04\")\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    }\n    // Call toHex on the positive component\n    value = toHex(value);\n    // Do not allow \"-0x00\"\n    if (value === \"0x00\") {\n      return value;\n    }\n    // Negate the value\n    return \"-\" + value;\n  }\n  // Add a \"0x\" prefix if missing\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  // Normalize zero\n  if (value === \"0x\") {\n    return \"0x00\";\n  }\n  // Make the string even length\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n  // Trim to smallest even-length string\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n  return value;\n}\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n  const hex = BigNumber.from(value).toHexString();\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n  return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n  if (value != null) {\n    params.value = value;\n  }\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}","map":{"version":3,"names":["BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","constructor","constructorGuard","hex","checkNew","new","target","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","fromTwos","toBigNumber","toBN","toTwos","abs","from","substring","add","other","sub","div","o","isZero","throwFault","mul","mod","isNeg","umod","pow","and","isNegative","or","xor","mask","maskn","shl","shln","shr","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","arguments","length","UNEXPECTED_ARGUMENT","toHexString","toHex","throwArgumentError","String","fault","params","NUMERIC_FAULT"],"sources":["../src.ts/bignumber.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}