{"ast":null,"code":"\"use strict\";\n\nimport { ec as EC } from \"elliptic\";\nimport { arrayify, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet _curve = null;\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new EC(\"secp256k1\");\n  }\n  return _curve;\n}\nexport class SigningKey {\n  constructor(privateKey) {\n    defineReadOnly(this, \"curve\", \"secp256k1\");\n    defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n    defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n    defineReadOnly(this, \"_isSigningKey\", true);\n  }\n  _addPoint(other) {\n    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n    const p1 = getCurve().keyFromPublic(arrayify(other));\n    return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n  }\n  signDigest(digest) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const signature = keyPair.sign(arrayify(digest), {\n      canonical: true\n    });\n    return splitSignature({\n      recoveryParam: signature.recoveryParam,\n      r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n      s: hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n    });\n  }\n  computeSharedSecret(otherKey) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n    return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n  }\n  static isSigningKey(value) {\n    return !!(value && value._isSigningKey);\n  }\n}\nexport function recoverPublicKey(digest, signature) {\n  const sig = splitSignature(signature);\n  const rs = {\n    r: arrayify(sig.r),\n    s: arrayify(sig.s)\n  };\n  return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n  const bytes = arrayify(key);\n  if (bytes.length === 32) {\n    const signingKey = new SigningKey(bytes);\n    if (compressed) {\n      return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n    }\n    return signingKey.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return hexlify(bytes);\n    }\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return hexlify(bytes);\n    }\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n  }\n  return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}","map":{"version":3,"names":["ec","EC","arrayify","hexlify","hexZeroPad","splitSignature","defineReadOnly","Logger","version","logger","_curve","getCurve","SigningKey","constructor","privateKey","keyPair","keyFromPrivate","getPublic","_addPoint","other","p0","keyFromPublic","publicKey","p1","pub","add","encodeCompressed","signDigest","digest","signature","sign","canonical","recoveryParam","r","toString","s","computeSharedSecret","otherKey","otherKeyPair","computePublicKey","derive","isSigningKey","value","_isSigningKey","recoverPublicKey","sig","rs","recoverPubKey","encode","key","compressed","bytes","length","signingKey","throwArgumentError"],"sources":["../src.ts/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}