{"ast":null,"code":"const A = require(\"./array.js\");\nconst at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);\nconst random = bytes => {\n  let rnd;\n  if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof require !== \"undefined\") rnd = require(\"c\" + \"rypto\").randomBytes(bytes);else throw \"Safe random numbers not available.\";\n  let hex = \"0x\";\n  for (let i = 0; i < bytes; ++i) hex += (\"00\" + rnd[i].toString(16)).slice(-2);\n  return hex;\n};\nconst length = a => (a.length - 2) / 2;\nconst flatten = a => \"0x\" + a.reduce((r, s) => r + s.slice(2), \"\");\nconst slice = (i, j, bs) => \"0x\" + bs.slice(i * 2 + 2, j * 2 + 2);\nconst reverse = hex => {\n  let rev = \"0x\";\n  for (let i = 0, l = length(hex); i < l; ++i) {\n    rev += hex.slice((l - i) * 2, (l - i + 1) * 2);\n  }\n  return rev;\n};\nconst pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, \"0x\" + \"0\" + hex.slice(2));\nconst padRight = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight(l, hex + \"0\");\nconst toArray = hex => {\n  let arr = [];\n  for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));\n  return arr;\n};\nconst fromArray = arr => {\n  let hex = \"0x\";\n  for (let i = 0, l = arr.length; i < l; ++i) {\n    let b = arr[i];\n    hex += (b < 16 ? \"0\" : \"\") + b.toString(16);\n  }\n  return hex;\n};\nconst toUint8Array = hex => new Uint8Array(toArray(hex));\nconst fromUint8Array = arr => fromArray([].slice.call(arr, 0));\nconst fromNumber = num => {\n  let hex = num.toString(16);\n  return hex.length % 2 === 0 ? \"0x\" + hex : \"0x0\" + hex;\n};\nconst toNumber = hex => parseInt(hex.slice(2), 16);\nconst concat = (a, b) => a.concat(b.slice(2));\nconst fromNat = bn => bn === \"0x0\" ? \"0x\" : bn.length % 2 === 0 ? bn : \"0x0\" + bn.slice(2);\nconst toNat = bn => bn[2] === \"0\" ? \"0x\" + bn.slice(3) : bn;\nconst fromAscii = ascii => {\n  let hex = \"0x\";\n  for (let i = 0; i < ascii.length; ++i) hex += (\"00\" + ascii.charCodeAt(i).toString(16)).slice(-2);\n  return hex;\n};\nconst toAscii = hex => {\n  let ascii = \"\";\n  for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));\n  return ascii;\n};\n\n// From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\nconst fromString = s => {\n  const makeByte = uint8 => {\n    const b = uint8.toString(16);\n    return b.length < 2 ? \"0\" + b : b;\n  };\n  let bytes = \"0x\";\n  for (let ci = 0; ci != s.length; ci++) {\n    let c = s.charCodeAt(ci);\n    if (c < 128) {\n      bytes += makeByte(c);\n      continue;\n    }\n    if (c < 2048) {\n      bytes += makeByte(c >> 6 | 192);\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) return null;\n        let c2 = s.charCodeAt(ci);\n        if (c2 < 0xdc00 || c2 > 0xdfff) return null;\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n        bytes += makeByte(c >> 18 | 240);\n        bytes += makeByte(c >> 12 & 63 | 128);\n      } else {\n        // c <= 0xffff\n        bytes += makeByte(c >> 12 | 224);\n      }\n      bytes += makeByte(c >> 6 & 63 | 128);\n    }\n    bytes += makeByte(c & 63 | 128);\n  }\n  return bytes;\n};\nconst toString = bytes => {\n  let s = '';\n  let i = 0;\n  let l = length(bytes);\n  while (i < l) {\n    let c = at(bytes, i++);\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= l) return null;\n        c = (c & 31) << 6 | at(bytes, i) & 63;\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= l) return null;\n        c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= l) return null;\n        c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else return null;\n      ++i;\n    }\n    if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n      c -= 0x10000;\n      s += String.fromCharCode(c >> 10 | 0xd800);\n      s += String.fromCharCode(c & 0x3FF | 0xdc00);\n    } else return null;\n  }\n  return s;\n};\nmodule.exports = {\n  random,\n  length,\n  concat,\n  flatten,\n  slice,\n  reverse,\n  pad,\n  padRight,\n  fromAscii,\n  toAscii,\n  fromString,\n  toString,\n  fromNumber,\n  toNumber,\n  fromNat,\n  toNat,\n  fromArray,\n  toArray,\n  fromUint8Array,\n  toUint8Array\n};","map":{"version":3,"names":["A","require","at","bytes","index","parseInt","slice","random","rnd","window","crypto","getRandomValues","Uint8Array","randomBytes","hex","i","toString","length","a","flatten","reduce","r","s","j","bs","reverse","rev","l","pad","padRight","toArray","arr","push","fromArray","b","toUint8Array","fromUint8Array","call","fromNumber","num","toNumber","concat","fromNat","bn","toNat","fromAscii","ascii","charCodeAt","toAscii","String","fromCharCode","fromString","makeByte","uint8","ci","c","c2","module","exports"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/bytes.js"],"sourcesContent":["const A = require(\"./array.js\");\n\nconst at = (bytes, index) => parseInt(bytes.slice(index * 2 + 2, index * 2 + 4), 16);\n\nconst random = bytes => {\n  let rnd;\n  if (typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues) rnd = window.crypto.getRandomValues(new Uint8Array(bytes));else if (typeof require !== \"undefined\") rnd = require(\"c\" + \"rypto\").randomBytes(bytes);else throw \"Safe random numbers not available.\";\n  let hex = \"0x\";\n  for (let i = 0; i < bytes; ++i) hex += (\"00\" + rnd[i].toString(16)).slice(-2);\n  return hex;\n};\n\nconst length = a => (a.length - 2) / 2;\n\nconst flatten = a => \"0x\" + a.reduce((r, s) => r + s.slice(2), \"\");\n\nconst slice = (i, j, bs) => \"0x\" + bs.slice(i * 2 + 2, j * 2 + 2);\n\nconst reverse = hex => {\n  let rev = \"0x\";\n  for (let i = 0, l = length(hex); i < l; ++i) {\n    rev += hex.slice((l - i) * 2, (l - i + 1) * 2);\n  }\n  return rev;\n};\n\nconst pad = (l, hex) => hex.length === l * 2 + 2 ? hex : pad(l, \"0x\" + \"0\" + hex.slice(2));\n\nconst padRight = (l, hex) => hex.length === l * 2 + 2 ? hex : padRight(l, hex + \"0\");\n\nconst toArray = hex => {\n  let arr = [];\n  for (let i = 2, l = hex.length; i < l; i += 2) arr.push(parseInt(hex.slice(i, i + 2), 16));\n  return arr;\n};\n\nconst fromArray = arr => {\n  let hex = \"0x\";\n  for (let i = 0, l = arr.length; i < l; ++i) {\n    let b = arr[i];\n    hex += (b < 16 ? \"0\" : \"\") + b.toString(16);\n  }\n  return hex;\n};\n\nconst toUint8Array = hex => new Uint8Array(toArray(hex));\n\nconst fromUint8Array = arr => fromArray([].slice.call(arr, 0));\n\nconst fromNumber = num => {\n  let hex = num.toString(16);\n  return hex.length % 2 === 0 ? \"0x\" + hex : \"0x0\" + hex;\n};\n\nconst toNumber = hex => parseInt(hex.slice(2), 16);\n\nconst concat = (a, b) => a.concat(b.slice(2));\n\nconst fromNat = bn => bn === \"0x0\" ? \"0x\" : bn.length % 2 === 0 ? bn : \"0x0\" + bn.slice(2);\n\nconst toNat = bn => bn[2] === \"0\" ? \"0x\" + bn.slice(3) : bn;\n\nconst fromAscii = ascii => {\n  let hex = \"0x\";\n  for (let i = 0; i < ascii.length; ++i) hex += (\"00\" + ascii.charCodeAt(i).toString(16)).slice(-2);\n  return hex;\n};\n\nconst toAscii = hex => {\n  let ascii = \"\";\n  for (let i = 2; i < hex.length; i += 2) ascii += String.fromCharCode(parseInt(hex.slice(i, i + 2), 16));\n  return ascii;\n};\n\n// From https://gist.github.com/pascaldekloe/62546103a1576803dade9269ccf76330\nconst fromString = s => {\n  const makeByte = uint8 => {\n    const b = uint8.toString(16);\n    return b.length < 2 ? \"0\" + b : b;\n  };\n  let bytes = \"0x\";\n  for (let ci = 0; ci != s.length; ci++) {\n    let c = s.charCodeAt(ci);\n    if (c < 128) {\n      bytes += makeByte(c);\n      continue;\n    }\n    if (c < 2048) {\n      bytes += makeByte(c >> 6 | 192);\n    } else {\n      if (c > 0xd7ff && c < 0xdc00) {\n        if (++ci == s.length) return null;\n        let c2 = s.charCodeAt(ci);\n        if (c2 < 0xdc00 || c2 > 0xdfff) return null;\n        c = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n        bytes += makeByte(c >> 18 | 240);\n        bytes += makeByte(c >> 12 & 63 | 128);\n      } else {\n        // c <= 0xffff\n        bytes += makeByte(c >> 12 | 224);\n      }\n      bytes += makeByte(c >> 6 & 63 | 128);\n    }\n    bytes += makeByte(c & 63 | 128);\n  }\n  return bytes;\n};\n\nconst toString = bytes => {\n  let s = '';\n  let i = 0;\n  let l = length(bytes);\n  while (i < l) {\n    let c = at(bytes, i++);\n    if (c > 127) {\n      if (c > 191 && c < 224) {\n        if (i >= l) return null;\n        c = (c & 31) << 6 | at(bytes, i) & 63;\n      } else if (c > 223 && c < 240) {\n        if (i + 1 >= l) return null;\n        c = (c & 15) << 12 | (at(bytes, i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else if (c > 239 && c < 248) {\n        if (i + 2 >= l) return null;\n        c = (c & 7) << 18 | (at(bytes, i) & 63) << 12 | (at(bytes, ++i) & 63) << 6 | at(bytes, ++i) & 63;\n      } else return null;\n      ++i;\n    }\n    if (c <= 0xffff) s += String.fromCharCode(c);else if (c <= 0x10ffff) {\n      c -= 0x10000;\n      s += String.fromCharCode(c >> 10 | 0xd800);\n      s += String.fromCharCode(c & 0x3FF | 0xdc00);\n    } else return null;\n  }\n  return s;\n};\n\nmodule.exports = {\n  random,\n  length,\n  concat,\n  flatten,\n  slice,\n  reverse,\n  pad,\n  padRight,\n  fromAscii,\n  toAscii,\n  fromString,\n  toString,\n  fromNumber,\n  toNumber,\n  fromNat,\n  toNat,\n  fromArray,\n  toArray,\n  fromUint8Array,\n  toUint8Array\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}