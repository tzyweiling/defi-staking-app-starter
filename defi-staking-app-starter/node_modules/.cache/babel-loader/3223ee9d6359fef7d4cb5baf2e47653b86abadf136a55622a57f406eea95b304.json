{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLength = exports.decode = exports.encode = void 0;\nvar BN = require(\"bn.js\");\n/**\n * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP\n * This function takes in a data, convert it to buffer if not, and a length for recursion\n * @param input - will be converted to buffer\n * @returns returns buffer of encoded data\n **/\nfunction encode(input) {\n  if (Array.isArray(input)) {\n    var output = [];\n    for (var i = 0; i < input.length; i++) {\n      output.push(encode(input[i]));\n    }\n    var buf = Buffer.concat(output);\n    return Buffer.concat([encodeLength(buf.length, 192), buf]);\n  } else {\n    var inputBuf = toBuffer(input);\n    return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : Buffer.concat([encodeLength(inputBuf.length, 128), inputBuf]);\n  }\n}\nexports.encode = encode;\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n * @param base The base to parse the integer into\n */\nfunction safeParseInt(v, base) {\n  if (v.slice(0, 2) === '00') {\n    throw new Error('invalid RLP: extra zeros');\n  }\n  return parseInt(v, base);\n}\nfunction encodeLength(len, offset) {\n  if (len < 56) {\n    return Buffer.from([len + offset]);\n  } else {\n    var hexLength = intToHex(len);\n    var lLength = hexLength.length / 2;\n    var firstByte = intToHex(offset + 55 + lLength);\n    return Buffer.from(firstByte + hexLength, 'hex');\n  }\n}\nfunction decode(input, stream) {\n  if (stream === void 0) {\n    stream = false;\n  }\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n  var inputBuffer = toBuffer(input);\n  var decoded = _decode(inputBuffer);\n  if (stream) {\n    return decoded;\n  }\n  if (decoded.remainder.length !== 0) {\n    throw new Error('invalid remainder');\n  }\n  return decoded.data;\n}\nexports.decode = decode;\n/**\n * Get the length of the RLP input\n * @param input\n * @returns The length of the input or an empty Buffer if no input\n */\nfunction getLength(input) {\n  if (!input || input.length === 0) {\n    return Buffer.from([]);\n  }\n  var inputBuffer = toBuffer(input);\n  var firstByte = inputBuffer[0];\n  if (firstByte <= 0x7f) {\n    return inputBuffer.length;\n  } else if (firstByte <= 0xb7) {\n    return firstByte - 0x7f;\n  } else if (firstByte <= 0xbf) {\n    return firstByte - 0xb6;\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    return firstByte - 0xbf;\n  } else {\n    // a list  over 55 bytes long\n    var llength = firstByte - 0xf6;\n    var length = safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);\n    return llength + length;\n  }\n}\nexports.getLength = getLength;\n/** Decode an input with RLP */\nfunction _decode(input) {\n  var length, llength, data, innerRemainder, d;\n  var decoded = [];\n  var firstByte = input[0];\n  if (firstByte <= 0x7f) {\n    // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n    return {\n      data: input.slice(0, 1),\n      remainder: input.slice(1)\n    };\n  } else if (firstByte <= 0xb7) {\n    // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n    // The range of the first byte is [0x80, 0xb7]\n    length = firstByte - 0x7f;\n    // set 0x80 null to 0\n    if (firstByte === 0x80) {\n      data = Buffer.from([]);\n    } else {\n      data = input.slice(1, length);\n    }\n    if (length === 2 && data[0] < 0x80) {\n      throw new Error('invalid rlp encoding: byte must be less 0x80');\n    }\n    return {\n      data: data,\n      remainder: input.slice(length)\n    };\n  } else if (firstByte <= 0xbf) {\n    // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n    // followed by the length, followed by the string\n    llength = firstByte - 0xb6;\n    if (input.length - 1 < llength) {\n      throw new Error('invalid RLP: not enough bytes for string length');\n    }\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    if (length <= 55) {\n      throw new Error('invalid RLP: expected string length to be greater than 55');\n    }\n    data = input.slice(llength, length + llength);\n    if (data.length < length) {\n      throw new Error('invalid RLP: not enough bytes for string');\n    }\n    return {\n      data: data,\n      remainder: input.slice(length + llength)\n    };\n  } else if (firstByte <= 0xf7) {\n    // a list between  0-55 bytes long\n    length = firstByte - 0xbf;\n    innerRemainder = input.slice(1, length);\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(length)\n    };\n  } else {\n    // a list  over 55 bytes long\n    llength = firstByte - 0xf6;\n    length = safeParseInt(input.slice(1, llength).toString('hex'), 16);\n    var totalLength = llength + length;\n    if (totalLength > input.length) {\n      throw new Error('invalid rlp: total length is larger than the data');\n    }\n    innerRemainder = input.slice(llength, totalLength);\n    if (innerRemainder.length === 0) {\n      throw new Error('invalid rlp, List has a invalid length');\n    }\n    while (innerRemainder.length) {\n      d = _decode(innerRemainder);\n      decoded.push(d.data);\n      innerRemainder = d.remainder;\n    }\n    return {\n      data: decoded,\n      remainder: input.slice(totalLength)\n    };\n  }\n}\n/** Check if a string is prefixed by 0x */\nfunction isHexPrefixed(str) {\n  return str.slice(0, 2) === '0x';\n}\n/** Removes 0x from a given String */\nfunction stripHexPrefix(str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform an integer into its hexadecimal value */\nfunction intToHex(integer) {\n  if (integer < 0) {\n    throw new Error('Invalid integer as argument, must be unsigned!');\n  }\n  var hex = integer.toString(16);\n  return hex.length % 2 ? \"0\" + hex : hex;\n}\n/** Pad a string to be even */\nfunction padToEven(a) {\n  return a.length % 2 ? \"0\" + a : a;\n}\n/** Transform an integer into a Buffer */\nfunction intToBuffer(integer) {\n  var hex = intToHex(integer);\n  return Buffer.from(hex, 'hex');\n}\n/** Transform anything into a Buffer */\nfunction toBuffer(v) {\n  if (!Buffer.isBuffer(v)) {\n    if (typeof v === 'string') {\n      if (isHexPrefixed(v)) {\n        return Buffer.from(padToEven(stripHexPrefix(v)), 'hex');\n      } else {\n        return Buffer.from(v);\n      }\n    } else if (typeof v === 'number' || typeof v === 'bigint') {\n      if (!v) {\n        return Buffer.from([]);\n      } else {\n        return intToBuffer(v);\n      }\n    } else if (v === null || v === undefined) {\n      return Buffer.from([]);\n    } else if (v instanceof Uint8Array) {\n      return Buffer.from(v);\n    } else if (BN.isBN(v)) {\n      // converts a BN to a Buffer\n      return Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n}","map":{"version":3,"names":["BN","require","encode","input","Array","isArray","output","i","length","push","buf","Buffer","concat","encodeLength","inputBuf","toBuffer","exports","safeParseInt","v","base","slice","Error","parseInt","len","offset","from","hexLength","intToHex","lLength","firstByte","decode","stream","inputBuffer","decoded","_decode","remainder","data","getLength","llength","toString","innerRemainder","d","totalLength","isHexPrefixed","str","stripHexPrefix","integer","hex","padToEven","a","intToBuffer","isBuffer","undefined","Uint8Array","isBN","toArray"],"sources":["../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}