{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {}\nexport class TransactionDescription extends Description {}\nexport class Indexed extends Description {\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n}\nfunction wrapAccessError(property, error) {\n  const wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\nfunction checkNames(fragment, type, params) {\n  params.reduce((accum, param) => {\n    if (param.name) {\n      if (accum[param.name]) {\n        logger.throwArgumentError(\"duplicate \".concat(type, \" parameter \").concat(JSON.stringify(param.name), \" in \").concat(fragment.format(\"full\")), \"fragment\", fragment);\n      }\n      accum[param.name] = true;\n    }\n    return accum;\n  }, {});\n}\nexport class Interface {\n  constructor(fragments) {\n    logger.checkNew(new.target, Interface);\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(fragment => {\n      return Fragment.from(fragment);\n    }).filter(fragment => fragment != null));\n    defineReadOnly(this, \"_abiCoder\", getStatic(new.target, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(fragment => {\n      let bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          checkNames(fragment, \"input\", fragment.inputs);\n          checkNames(fragment, \"output\", fragment.outputs);\n          bucket = this.functions;\n          break;\n        case \"event\":\n          checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.events;\n          break;\n        default:\n          return;\n      }\n      let signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  format(format) {\n    if (!format) {\n      format = FormatTypes.full;\n    }\n    if (format === FormatTypes.sighash) {\n      logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n    }\n    const abi = this.fragments.map(fragment => fragment.format(format));\n    // We need to re-bundle the JSON fragments a bit\n    if (format === FormatTypes.json) {\n      return JSON.stringify(abi.map(j => JSON.parse(j)));\n    }\n    return abi;\n  }\n  // Sub-classes can override these to handle other blockchains\n  static getAbiCoder() {\n    return defaultAbiCoder;\n  }\n  static getAddress(address) {\n    return getAddress(address);\n  }\n  static getSighash(functionFragment) {\n    return hexDataSlice(id(functionFragment.format()), 0, 4);\n  }\n  static getEventTopic(eventFragment) {\n    return id(eventFragment.format());\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  getFunction(nameOrSignatureOrSighash) {\n    if (isHexString(nameOrSignatureOrSighash)) {\n      for (const name in this.functions) {\n        if (nameOrSignatureOrSighash === this.getSighash(name)) {\n          return this.functions[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrSighash.trim();\n      const matching = Object.keys(this.functions).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching function\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n      }\n      return this.functions[matching[0]];\n    }\n    // Normlize the signature and lookup the function\n    const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n    }\n    return result;\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  getEvent(nameOrSignatureOrTopic) {\n    if (isHexString(nameOrSignatureOrTopic)) {\n      const topichash = nameOrSignatureOrTopic.toLowerCase();\n      for (const name in this.events) {\n        if (topichash === this.getEventTopic(name)) {\n          return this.events[name];\n        }\n      }\n      logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n      const name = nameOrSignatureOrTopic.trim();\n      const matching = Object.keys(this.events).filter(f => f.split(\"(\" /* fix:) */)[0] === name);\n      if (matching.length === 0) {\n        logger.throwArgumentError(\"no matching event\", \"name\", name);\n      } else if (matching.length > 1) {\n        logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n      }\n      return this.events[matching[0]];\n    }\n    // Normlize the signature and lookup the function\n    const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n    if (!result) {\n      logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n    }\n    return result;\n  }\n  // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  getSighash(functionFragment) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return getStatic(this.constructor, \"getSighash\")(functionFragment);\n  }\n  // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  getEventTopic(eventFragment) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n  }\n  _decodeParams(params, data) {\n    return this._abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this._abiCoder.encode(params, values);\n  }\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  // Decode the data for a function call (e.g. tx.data)\n  decodeFunctionData(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    const bytes = arrayify(data);\n    if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n      logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n    }\n    return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n  }\n  // Encode the data for a function call (e.g. tx.data)\n  encodeFunctionData(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n  }\n  // Decode the result from a function call (e.g. from eth_call)\n  decodeFunctionResult(functionFragment, data) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    let bytes = arrayify(data);\n    let reason = null;\n    let errorSignature = null;\n    switch (bytes.length % this._abiCoder._getWordSize()) {\n      case 0:\n        try {\n          return this._abiCoder.decode(functionFragment.outputs, bytes);\n        } catch (error) {}\n        break;\n      case 4:\n        if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n          errorSignature = \"Error(string)\";\n          reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n        }\n        break;\n    }\n    return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n      method: functionFragment.format(),\n      errorSignature: errorSignature,\n      errorArgs: [reason],\n      reason: reason\n    });\n  }\n  // Encode the result for a function call (e.g. for eth_call)\n  encodeFunctionResult(functionFragment, values) {\n    if (typeof functionFragment === \"string\") {\n      functionFragment = this.getFunction(functionFragment);\n    }\n    return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n  }\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (values.length > eventFragment.inputs.length) {\n      logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n        argument: \"values\",\n        value: values\n      });\n    }\n    let topics = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return id(value);\n      } else if (param.type === \"bytes\") {\n        return keccak256(hexlify(value));\n      }\n      // Check addresses are valid\n      if (param.type === \"address\") {\n        this._abiCoder.encode([\"address\"], [value]);\n      }\n      return hexZeroPad(hexlify(value), 32);\n    };\n    values.forEach((value, index) => {\n      let param = eventFragment.inputs[index];\n      if (!param.indexed) {\n        if (value != null) {\n          logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        }\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(eventFragment, values) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!eventFragment.anonymous) {\n      topics.push(this.getEventTopic(eventFragment));\n    }\n    if (values.length !== eventFragment.inputs.length) {\n      logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n    }\n    eventFragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push(id(value));\n        } else if (param.type === \"bytes\") {\n          topics.push(keccak256(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TOOD\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this._abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this._abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(eventFragment, data, topics) {\n    if (typeof eventFragment === \"string\") {\n      eventFragment = this.getEvent(eventFragment);\n    }\n    if (topics != null && !eventFragment.anonymous) {\n      let topicHash = this.getEventTopic(eventFragment);\n      if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n        logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"topics[0]\",\n          expected: topicHash,\n          value: topics[0]\n        });\n      }\n      topics = topics.slice(1);\n    }\n    let indexed = [];\n    let nonIndexed = [];\n    let dynamic = [];\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(ParamType.fromObject({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n    let result = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    eventFragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: null\n          });\n        } else if (dynamic[index]) {\n          result[index] = new Indexed({\n            _isIndexed: true,\n            hash: resultIndexed[indexedIndex++]\n          });\n        } else {\n          try {\n            result[index] = resultIndexed[indexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n      } else {\n        try {\n          result[index] = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          result[index] = error;\n        }\n      }\n      // Add the keyword argument if named and safe\n      if (param.name && result[param.name] == null) {\n        const value = result[index];\n        // Make error named values throw on access\n        if (value instanceof Error) {\n          Object.defineProperty(result, param.name, {\n            get: () => {\n              throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n            }\n          });\n        } else {\n          result[param.name] = value;\n        }\n      }\n    });\n    // Make all error indexed values throw on access\n    for (let i = 0; i < result.length; i++) {\n      const value = result[i];\n      if (value instanceof Error) {\n        Object.defineProperty(result, i, {\n          get: () => {\n            throw wrapAccessError(\"index \".concat(i), value);\n          }\n        });\n      }\n    }\n    return Object.freeze(result);\n  }\n  // Given a transaction, find the matching function fragment (if any) and\n  // determine all its properties and call parameters\n  parseTransaction(tx) {\n    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n    if (!fragment) {\n      return null;\n    }\n    return new TransactionDescription({\n      args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n      functionFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      sighash: this.getSighash(fragment),\n      value: BigNumber.from(tx.value || \"0\")\n    });\n  }\n  // Given an event log, find the matching event fragment (if any) and\n  // determine all its properties and values\n  parseLog(log) {\n    let fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe jsut a fragment?\n    return new LogDescription({\n      eventFragment: fragment,\n      name: fragment.name,\n      signature: fragment.format(),\n      topic: this.getEventTopic(fragment),\n      args: this.decodeEventLog(fragment, log.data, log.topics)\n    });\n  }\n  /*\n  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n      if (Interface.isInterface(value)) {\n          return value;\n      }\n      if (typeof(value) === \"string\") {\n          return new Interface(JSON.parse(value));\n      }\n      return new Interface(value);\n  }\n  */\n  static isInterface(value) {\n    return !!(value && value._isInterface);\n  }\n}","map":{"version":3,"names":["getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","TransactionDescription","Indexed","isIndexed","value","_isIndexed","wrapAccessError","property","error","wrap","Error","checkNames","fragment","type","params","reduce","accum","param","name","throwArgumentError","JSON","stringify","format","Interface","constructor","fragments","checkNew","new","target","abi","parse","map","from","filter","forEach","bucket","deploy","warn","inputs","outputs","functions","events","signature","payable","full","sighash","json","j","getAbiCoder","address","getSighash","functionFragment","getEventTopic","eventFragment","getFunction","nameOrSignatureOrSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","_decodeParams","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeFunctionData","bytes","slice","encodeFunctionData","decodeFunctionResult","reason","errorSignature","_getWordSize","throwError","errors","CALL_EXCEPTION","method","errorArgs","encodeFunctionResult","encodeFilterTopics","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","index","indexed","baseType","Array","isArray","pop","encodeEventLog","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","get","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","isInterface","_isInterface"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/@ethersproject/abi/lib.esm/interface.js"],"sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\nfunction checkNames(fragment, type, params) {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${type} parameter ${JSON.stringify(param.name)} in ${fragment.format(\"full\")}`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, {});\n}\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic((new.target), \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    checkNames(fragment, \"output\", fragment.outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(functionFragment) {\n        return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(functionFragment) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4:\n                if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n                    errorSignature = \"Error(string)\";\n                    reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                }\n                break;\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorSignature: errorSignature,\n            errorArgs: [reason],\n            reason: reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TOOD\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}