{"ast":null,"code":"// Thanks https://github.com/axic/swarmhash\nvar keccak = require(\"eth-lib/lib/hash\").keccak256;\nvar Bytes = require(\"eth-lib/lib/bytes\");\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n}; // (Bytes | Uint8Array | String) -> String\n\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n  var length = Bytes.length(data);\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n  var maxSize = 4096;\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n  var innerNodes = [];\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\nmodule.exports = swarmHash;","map":{"version":3,"names":["keccak","require","keccak256","Bytes","swarmHashBlock","length","data","lengthEncoded","reverse","pad","fromNumber","bytes","flatten","slice","swarmHash","fromString","undefined","fromUint8Array","maxSize","innerNodes","i","size","push","module","exports"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/swarm-js/lib/swarm-hash.js"],"sourcesContent":["// Thanks https://github.com/axic/swarmhash\nvar keccak = require(\"eth-lib/lib/hash\").keccak256;\n\nvar Bytes = require(\"eth-lib/lib/bytes\");\n\nvar swarmHashBlock = function swarmHashBlock(length, data) {\n  var lengthEncoded = Bytes.reverse(Bytes.pad(6, Bytes.fromNumber(length)));\n  var bytes = Bytes.flatten([lengthEncoded, \"0x0000\", data]);\n  return keccak(bytes).slice(2);\n}; // (Bytes | Uint8Array | String) -> String\n\n\nvar swarmHash = function swarmHash(data) {\n  if (typeof data === \"string\" && data.slice(0, 2) !== \"0x\") {\n    data = Bytes.fromString(data);\n  } else if (typeof data !== \"string\" && data.length !== undefined) {\n    data = Bytes.fromUint8Array(data);\n  }\n\n  var length = Bytes.length(data);\n\n  if (length <= 4096) {\n    return swarmHashBlock(length, data);\n  }\n\n  var maxSize = 4096;\n\n  while (maxSize * (4096 / 32) < length) {\n    maxSize *= 4096 / 32;\n  }\n\n  var innerNodes = [];\n\n  for (var i = 0; i < length; i += maxSize) {\n    var size = maxSize < length - i ? maxSize : length - i;\n    innerNodes.push(swarmHash(Bytes.slice(data, i, i + size)));\n  }\n\n  return swarmHashBlock(length, Bytes.flatten(innerNodes));\n};\n\nmodule.exports = swarmHash;"],"mappings":"AAAA;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,kBAAkB,CAAC,CAACC,SAAS;AAElD,IAAIC,KAAK,GAAGF,OAAO,CAAC,mBAAmB,CAAC;AAExC,IAAIG,cAAc,GAAG,SAASA,cAAcA,CAACC,MAAM,EAAEC,IAAI,EAAE;EACzD,IAAIC,aAAa,GAAGJ,KAAK,CAACK,OAAO,CAACL,KAAK,CAACM,GAAG,CAAC,CAAC,EAAEN,KAAK,CAACO,UAAU,CAACL,MAAM,CAAC,CAAC,CAAC;EACzE,IAAIM,KAAK,GAAGR,KAAK,CAACS,OAAO,CAAC,CAACL,aAAa,EAAE,QAAQ,EAAED,IAAI,CAAC,CAAC;EAC1D,OAAON,MAAM,CAACW,KAAK,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC,CAAC;;AAGH,IAAIC,SAAS,GAAG,SAASA,SAASA,CAACR,IAAI,EAAE;EACvC,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACO,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;IACzDP,IAAI,GAAGH,KAAK,CAACY,UAAU,CAACT,IAAI,CAAC;EAC/B,CAAC,MAAM,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,CAACD,MAAM,KAAKW,SAAS,EAAE;IAChEV,IAAI,GAAGH,KAAK,CAACc,cAAc,CAACX,IAAI,CAAC;EACnC;EAEA,IAAID,MAAM,GAAGF,KAAK,CAACE,MAAM,CAACC,IAAI,CAAC;EAE/B,IAAID,MAAM,IAAI,IAAI,EAAE;IAClB,OAAOD,cAAc,CAACC,MAAM,EAAEC,IAAI,CAAC;EACrC;EAEA,IAAIY,OAAO,GAAG,IAAI;EAElB,OAAOA,OAAO,IAAI,IAAI,GAAG,EAAE,CAAC,GAAGb,MAAM,EAAE;IACrCa,OAAO,IAAI,IAAI,GAAG,EAAE;EACtB;EAEA,IAAIC,UAAU,GAAG,EAAE;EAEnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,MAAM,EAAEe,CAAC,IAAIF,OAAO,EAAE;IACxC,IAAIG,IAAI,GAAGH,OAAO,GAAGb,MAAM,GAAGe,CAAC,GAAGF,OAAO,GAAGb,MAAM,GAAGe,CAAC;IACtDD,UAAU,CAACG,IAAI,CAACR,SAAS,CAACX,KAAK,CAACU,KAAK,CAACP,IAAI,EAAEc,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAAC,CAAC,CAAC;EAC5D;EAEA,OAAOjB,cAAc,CAACC,MAAM,EAAEF,KAAK,CAACS,OAAO,CAACO,UAAU,CAAC,CAAC;AAC1D,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGV,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}