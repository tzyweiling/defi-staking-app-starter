{"ast":null,"code":"(function (root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define(['punycode', './idna-map'], function (punycode, idna_map) {\n      return factory(punycode, idna_map);\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('punycode'), require('./idna-map'));\n  } else {\n    root.uts46 = factory(root.punycode, root.idna_map);\n  }\n})(this, function (punycode, idna_map) {\n  function mapLabel(label, useStd3ASCII, transitional) {\n    var mapped = [];\n    var chars = punycode.ucs2.decode(label);\n    for (var i = 0; i < chars.length; i++) {\n      var cp = chars[i];\n      var ch = punycode.ucs2.encode([chars[i]]);\n      var composite = idna_map.mapChar(cp);\n      var flags = composite >> 23;\n      var kind = composite >> 21 & 3;\n      var index = composite >> 5 & 0xffff;\n      var length = composite & 0x1f;\n      var value = idna_map.mapStr.substr(index, length);\n      if (kind === 0 || useStd3ASCII && flags & 1) {\n        throw new Error(\"Illegal char \" + ch);\n      } else if (kind === 1) {\n        mapped.push(value);\n      } else if (kind === 2) {\n        mapped.push(transitional ? value : ch);\n      }\n      /* istanbul ignore next */else if (kind === 3) {\n        mapped.push(ch);\n      }\n    }\n    var newLabel = mapped.join(\"\").normalize(\"NFC\");\n    return newLabel;\n  }\n  function process(domain, transitional, useStd3ASCII) {\n    /* istanbul ignore if */\n    if (useStd3ASCII === undefined) useStd3ASCII = false;\n    var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);\n\n    // Step 3. Break\n    var labels = mappedIDNA.split(\".\");\n\n    // Step 4. Convert/Validate\n    labels = labels.map(function (label) {\n      if (label.startsWith(\"xn--\")) {\n        label = punycode.decode(label.substring(4));\n        validateLabel(label, useStd3ASCII, false);\n      } else {\n        validateLabel(label, useStd3ASCII, transitional);\n      }\n      return label;\n    });\n    return labels.join(\".\");\n  }\n  function validateLabel(label, useStd3ASCII, transitional) {\n    // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the\n    // third position and fourth positions.\n    if (label[2] === '-' && label[3] === '-') throw new Error(\"Failed to validate \" + label);\n\n    // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS\n    // character.\n    if (label.startsWith('-') || label.endsWith('-')) throw new Error(\"Failed to validate \" + label);\n\n    // 4. The label must not contain a U+002E ( . ) FULL STOP.\n    // this should nerver happen as label is chunked internally by this character\n    /* istanbul ignore if */\n    if (label.includes('.')) throw new Error(\"Failed to validate \" + label);\n    if (mapLabel(label, useStd3ASCII, transitional) !== label) throw new Error(\"Failed to validate \" + label);\n\n    // 5. The label must not begin with a combining mark, that is:\n    // General_Category=Mark.\n    var ch = label.codePointAt(0);\n    if (idna_map.mapChar(ch) & 0x2 << 23) throw new Error(\"Label contains illegal character: \" + ch);\n  }\n  function toAscii(domain, options) {\n    if (options === undefined) options = {};\n    var transitional = 'transitional' in options ? options.transitional : true;\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;\n    var labels = process(domain, transitional, useStd3ASCII).split('.');\n    var asciiLabels = labels.map(punycode.toASCII);\n    var asciiString = asciiLabels.join('.');\n    var i;\n    if (verifyDnsLength) {\n      if (asciiString.length < 1 || asciiString.length > 253) {\n        throw new Error(\"DNS name has wrong length: \" + asciiString);\n      }\n      for (i = 0; i < asciiLabels.length; i++) {\n        //for .. of replacement\n        var label = asciiLabels[i];\n        if (label.length < 1 || label.length > 63) throw new Error(\"DNS label has wrong length: \" + label);\n      }\n    }\n    return asciiString;\n  }\n  function toUnicode(domain, options) {\n    if (options === undefined) options = {};\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    return process(domain, false, useStd3ASCII);\n  }\n  return {\n    toUnicode: toUnicode,\n    toAscii: toAscii\n  };\n});","map":{"version":3,"names":["root","factory","define","amd","punycode","idna_map","exports","module","require","uts46","mapLabel","label","useStd3ASCII","transitional","mapped","chars","ucs2","decode","i","length","cp","ch","encode","composite","mapChar","flags","kind","index","value","mapStr","substr","Error","push","newLabel","join","normalize","process","domain","undefined","mappedIDNA","labels","split","map","startsWith","substring","validateLabel","endsWith","includes","codePointAt","toAscii","options","verifyDnsLength","asciiLabels","toASCII","asciiString","toUnicode"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/idna-uts46-hx/uts46.js"],"sourcesContent":["(function(root, factory) {\n  /* istanbul ignore next */\n  if (typeof define === 'function' && define.amd) {\n    define(['punycode', './idna-map'], function(punycode, idna_map) {\n      return factory(punycode, idna_map);\n    });\n  }\n  else if (typeof exports === 'object') {\n    module.exports = factory(require('punycode'), require('./idna-map'));\n  }\n  else {\n    root.uts46 = factory(root.punycode, root.idna_map);\n  }\n}(this, function(punycode, idna_map) {\n\n  function mapLabel(label, useStd3ASCII, transitional) {\n    var mapped = [];\n    var chars = punycode.ucs2.decode(label);\n    for (var i = 0; i < chars.length; i++) {\n      var cp = chars[i];\n      var ch = punycode.ucs2.encode([chars[i]]);\n      var composite = idna_map.mapChar(cp);\n      var flags = (composite >> 23);\n      var kind = (composite >> 21) & 3;\n      var index = (composite >> 5) & 0xffff;\n      var length = composite & 0x1f;\n      var value = idna_map.mapStr.substr(index, length);\n      if (kind === 0 || (useStd3ASCII && (flags & 1))) {\n        throw new Error(\"Illegal char \" + ch);\n      }\n      else if (kind === 1) {\n        mapped.push(value);\n      }\n      else if (kind === 2) {\n        mapped.push(transitional ? value : ch);\n      }\n      /* istanbul ignore next */\n      else if (kind === 3) {\n        mapped.push(ch);\n      }\n    }\n\n    var newLabel = mapped.join(\"\").normalize(\"NFC\");\n    return newLabel;\n  }\n\n  function process(domain, transitional, useStd3ASCII) {\n    /* istanbul ignore if */\n    if (useStd3ASCII === undefined)\n      useStd3ASCII = false;\n    var mappedIDNA = mapLabel(domain, useStd3ASCII, transitional);\n\n    // Step 3. Break\n    var labels = mappedIDNA.split(\".\");\n\n    // Step 4. Convert/Validate\n    labels = labels.map(function(label) {\n      if (label.startsWith(\"xn--\")) {\n        label = punycode.decode(label.substring(4));\n        validateLabel(label, useStd3ASCII, false);\n      }\n      else {\n        validateLabel(label, useStd3ASCII, transitional);\n      }\n      return label;\n    });\n\n    return labels.join(\".\");\n  }\n\n  function validateLabel(label, useStd3ASCII, transitional) {\n    // 2. The label must not contain a U+002D HYPHEN-MINUS character in both the\n    // third position and fourth positions.\n    if (label[2] === '-' && label[3] === '-')\n      throw new Error(\"Failed to validate \" + label);\n\n    // 3. The label must neither begin nor end with a U+002D HYPHEN-MINUS\n    // character.\n    if (label.startsWith('-') || label.endsWith('-'))\n      throw new Error(\"Failed to validate \" + label);\n\n    // 4. The label must not contain a U+002E ( . ) FULL STOP.\n    // this should nerver happen as label is chunked internally by this character\n    /* istanbul ignore if */\n    if (label.includes('.'))\n      throw new Error(\"Failed to validate \" + label);\n\n    if (mapLabel(label, useStd3ASCII, transitional) !== label)\n      throw new Error(\"Failed to validate \" + label);\n\n    // 5. The label must not begin with a combining mark, that is:\n    // General_Category=Mark.\n    var ch = label.codePointAt(0);\n    if (idna_map.mapChar(ch) & (0x2 << 23))\n      throw new Error(\"Label contains illegal character: \" + ch);\n  }\n\n  function toAscii(domain, options) {\n    if (options === undefined)\n      options = {};\n    var transitional = 'transitional' in options ? options.transitional : true;\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    var verifyDnsLength = 'verifyDnsLength' in options ? options.verifyDnsLength : false;\n    var labels = process(domain, transitional, useStd3ASCII).split('.');\n    var asciiLabels = labels.map(punycode.toASCII);\n    var asciiString = asciiLabels.join('.');\n    var i;\n    if (verifyDnsLength) {\n      if (asciiString.length < 1 || asciiString.length > 253) {\n        throw new Error(\"DNS name has wrong length: \" + asciiString);\n      }\n      for (i = 0; i < asciiLabels.length; i++) {//for .. of replacement\n        var label = asciiLabels[i];\n        if (label.length < 1 || label.length > 63)\n          throw new Error(\"DNS label has wrong length: \" + label);\n      }\n    }\n    return asciiString;\n  }\n\n  function toUnicode(domain, options) {\n    if (options === undefined)\n      options = {};\n    var useStd3ASCII = 'useStd3ASCII' in options ? options.useStd3ASCII : false;\n    return process(domain, false, useStd3ASCII);\n  }\n\n  return {\n    toUnicode: toUnicode,\n    toAscii: toAscii,\n  };\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}