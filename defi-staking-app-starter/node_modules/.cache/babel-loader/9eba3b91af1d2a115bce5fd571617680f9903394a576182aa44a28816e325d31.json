{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file Registry.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar Contract = require('web3-eth-contract');\nvar namehash = require('eth-ens-namehash');\nvar PromiEvent = require('web3-core-promievent');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar REGISTRY_ABI = require('../resources/ABI/Registry');\nvar RESOLVER_ABI = require('../resources/ABI/Resolver');\n\n/**\n * A wrapper around the ENS registry contract.\n *\n * @method Registry\n * @param {Ens} ens\n * @constructor\n */\nfunction Registry(ens) {\n  var self = this;\n  this.ens = ens;\n  this.contract = ens.checkNetwork().then(function (address) {\n    var contract = new Contract(REGISTRY_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n    return contract;\n  });\n}\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\n *\n * @method owner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.owner = function (name, callback) {\n  console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\n  return this.getOwner(name, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.getOwner = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.owner(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setOwner = function (name, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the TTL of the given node by his name\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returnss {Promise<string>}\n */\nRegistry.prototype.getTTL = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.ttl(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setTTL = function (name, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  if (!utils.isHexStrict(label)) {\n    label = utils.sha3(label);\n  }\n  this.contract.then(function (contract) {\n    return contract.methods.setSubnodeOwner(namehash.hash(name), label, formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setRecord(namehash.hash(name), formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  if (!utils.isHexStrict(label)) {\n    label = utils.sha3(label);\n  }\n  this.contract.then(function (contract) {\n    return contract.methods.setSubnodeRecord(namehash.hash(name), label, formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(resolver), ttl).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.isApprovedForAll = function (owner, operator, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.isApprovedForAll(formatters.inputAddressFormatter(owner), formatters.inputAddressFormatter(operator)).call();\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.recordExists = function (name, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.recordExists(namehash.hash(name)).call();\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the resolver contract associated with a name.\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.resolver = function (name, callback) {\n  console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\n  return this.getResolver(name, callback);\n};\n\n/**\n * Returns the resolver contract associated with a name.\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.getResolver = function (name, callback) {\n  var self = this;\n  return this.contract.then(function (contract) {\n    return contract.methods.resolver(namehash.hash(name)).call();\n  }).then(function (address) {\n    var contract = new Contract(RESOLVER_ABI, address);\n    contract.setProvider(self.ens.eth.currentProvider);\n    if (_.isFunction(callback)) {\n      // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\n      callback(contract, contract);\n      return;\n    }\n    return contract;\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    throw error;\n  });\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setResolver = function (name, address, txConfig, callback) {\n  var promiEvent = new PromiEvent(true);\n  this.contract.then(function (contract) {\n    return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n  }).then(function (receipt) {\n    if (_.isFunction(callback)) {\n      // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n      callback(receipt, receipt);\n      return;\n    }\n    promiEvent.resolve(receipt);\n  }).catch(function (error) {\n    if (_.isFunction(callback)) {\n      callback(error, null);\n      return;\n    }\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\nmodule.exports = Registry;","map":{"version":3,"names":["_","require","Contract","namehash","PromiEvent","formatters","utils","REGISTRY_ABI","RESOLVER_ABI","Registry","ens","self","contract","checkNetwork","then","address","setProvider","eth","currentProvider","prototype","owner","name","callback","console","warn","getOwner","promiEvent","methods","hash","call","receipt","isFunction","resolve","catch","error","reject","eventEmitter","setOwner","txConfig","inputAddressFormatter","send","getTTL","ttl","setTTL","setSubnodeOwner","label","isHexStrict","sha3","setRecord","resolver","setSubnodeRecord","setApprovalForAll","operator","approved","isApprovedForAll","recordExists","getResolver","setResolver","module","exports"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/web3-eth-ens/src/contracts/Registry.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file Registry.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar Contract = require('web3-eth-contract');\nvar namehash = require('eth-ens-namehash');\nvar PromiEvent = require('web3-core-promievent');\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar REGISTRY_ABI = require('../resources/ABI/Registry');\nvar RESOLVER_ABI = require('../resources/ABI/Resolver');\n\n\n/**\n * A wrapper around the ENS registry contract.\n *\n * @method Registry\n * @param {Ens} ens\n * @constructor\n */\nfunction Registry(ens) {\n    var self = this;\n    this.ens = ens;\n    this.contract = ens.checkNetwork().then(function (address) {\n        var contract = new Contract(REGISTRY_ABI, address);\n        contract.setProvider(self.ens.eth.currentProvider);\n\n        return contract;\n    });\n}\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @deprecated Please use the \"getOwner\" method instead of \"owner\"\n *\n * @method owner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.owner = function (name, callback) {\n    console.warn('Deprecated: Please use the \"getOwner\" method instead of \"owner\".');\n\n    return this.getOwner(name, callback);\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method getOwner\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<string>}\n */\nRegistry.prototype.getOwner = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.owner(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setOwner\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setOwner = function (name, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.setOwner(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the TTL of the given node by his name\n *\n * @method getTTL\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returnss {Promise<string>}\n */\nRegistry.prototype.getTTL = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.ttl(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setTTL\n *\n * @param {string} name\n * @param {number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setTTL = function (name, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.setTTL(namehash.hash(name), ttl).send(txConfig);\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setSubnodeOwner\n *\n * @param {string} name\n * @param {string} label\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeOwner = function (name, label, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    if (!utils.isHexStrict(label)) {\n        label = utils.sha3(label);\n    }\n\n    this.contract.then(function (contract) {\n        return contract.methods.setSubnodeOwner(\n            namehash.hash(name),\n            label,\n            formatters.inputAddressFormatter(address)\n        ).send(txConfig);\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Sets the owner, resolver, and TTL for an ENS record in a single operation.\n *\n * @method setRecord\n *\n * @param {string} name\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setRecord = function (name, owner, resolver, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.setRecord(\n            namehash.hash(name),\n            formatters.inputAddressFormatter(owner),\n            formatters.inputAddressFormatter(resolver),\n            ttl\n        ).send(txConfig);\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Sets the owner, resolver and TTL for a subdomain, creating it if necessary.\n *\n * @method setSubnodeRecord\n *\n * @param {string} name\n * @param {string} label\n * @param {string} owner\n * @param {string} resolver\n * @param {string | number} ttl\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setSubnodeRecord = function (name, label, owner, resolver, ttl, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    if (!utils.isHexStrict(label)) {\n        label = utils.sha3(label);\n    }\n\n    this.contract.then(function (contract) {\n        return contract.methods.setSubnodeRecord(\n            namehash.hash(name),\n            label,\n            formatters.inputAddressFormatter(owner),\n            formatters.inputAddressFormatter(resolver),\n            ttl\n        ).send(txConfig);\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Sets or clears an approval by the given operator.\n *\n * @method setApprovalForAll\n *\n * @param {string} operator\n * @param {boolean} approved\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setApprovalForAll = function (operator, approved, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.setApprovalForAll(formatters.inputAddressFormatter(operator), approved).send(txConfig);\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Returns true if the operator is approved\n *\n * @method isApprovedForAll\n *\n * @param {string} owner\n * @param {string} operator\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.isApprovedForAll = function (owner, operator, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.isApprovedForAll(\n            formatters.inputAddressFormatter(owner),\n            formatters.inputAddressFormatter(operator)\n        ).call();\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Returns true if the record exists\n *\n * @method recordExists\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<boolean>}\n */\nRegistry.prototype.recordExists = function (name, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.recordExists(namehash.hash(name)).call();\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\n/**\n * Returns the resolver contract associated with a name.\n *\n * @deprecated Please use the \"getResolver\" method instead of \"resolver\"\n *\n * @method resolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.resolver = function (name, callback) {\n    console.warn('Deprecated: Please use the \"getResolver\" method instead of \"resolver\".');\n\n    return this.getResolver(name, callback);\n};\n\n/**\n * Returns the resolver contract associated with a name.\n *\n * @method getResolver\n *\n * @param {string} name\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {Promise<Contract>}\n */\nRegistry.prototype.getResolver = function (name, callback) {\n    var self = this;\n\n    return this.contract.then(function (contract) {\n        return contract.methods.resolver(namehash.hash(name)).call();\n    }).then(function (address) {\n        var contract = new Contract(RESOLVER_ABI, address);\n        contract.setProvider(self.ens.eth.currentProvider);\n\n        if (_.isFunction(callback)) {\n            // It's required to pass the contract to the first argument to be backward compatible and to have the required consistency\n            callback(contract, contract);\n\n            return;\n        }\n\n        return contract;\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        throw error;\n    });\n};\n\n/**\n * Returns the address of the owner of an ENS name.\n *\n * @method setResolver\n *\n * @param {string} name\n * @param {string} address\n * @param {TransactionConfig} txConfig\n * @param {function} callback\n *\n * @callback callback callback(error, result)\n * @returns {PromiEvent<TransactionReceipt | TransactionRevertInstructionError>}\n */\nRegistry.prototype.setResolver = function (name, address, txConfig, callback) {\n    var promiEvent = new PromiEvent(true);\n\n    this.contract.then(function (contract) {\n        return contract.methods.setResolver(namehash.hash(name), formatters.inputAddressFormatter(address)).send(txConfig);\n    }).then(function (receipt) {\n        if (_.isFunction(callback)) {\n            // It's required to pass the receipt to the first argument to be backward compatible and to have the required consistency\n            callback(receipt, receipt);\n\n            return;\n        }\n\n        promiEvent.resolve(receipt);\n    }).catch(function (error) {\n        if (_.isFunction(callback)) {\n            callback(error, null);\n\n            return;\n        }\n\n        promiEvent.reject(error);\n    });\n\n    return promiEvent.eventEmitter;\n};\n\nmodule.exports = Registry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}