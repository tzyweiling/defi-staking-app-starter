{"ast":null,"code":"var queryString = require('query-string');\nvar setQuery = require('url-set-query');\nvar assign = require('object-assign');\nvar ensureHeader = require('./lib/ensure-header.js');\n\n// this is replaced in the browser\nvar request = require('./lib/request.js');\nvar mimeTypeJson = 'application/json';\nvar noop = function () {};\nmodule.exports = xhrRequest;\nfunction xhrRequest(url, opt, cb) {\n  if (!url || typeof url !== 'string') {\n    throw new TypeError('must specify a URL');\n  }\n  if (typeof opt === 'function') {\n    cb = opt;\n    opt = {};\n  }\n  if (cb && typeof cb !== 'function') {\n    throw new TypeError('expected cb to be undefined or a function');\n  }\n  cb = cb || noop;\n  opt = opt || {};\n  var defaultResponse = opt.json ? 'json' : 'text';\n  opt = assign({\n    responseType: defaultResponse\n  }, opt);\n  var headers = opt.headers || {};\n  var method = (opt.method || 'GET').toUpperCase();\n  var query = opt.query;\n  if (query) {\n    if (typeof query !== 'string') {\n      query = queryString.stringify(query);\n    }\n    url = setQuery(url, query);\n  }\n\n  // allow json response\n  if (opt.responseType === 'json') {\n    ensureHeader(headers, 'Accept', mimeTypeJson);\n  }\n\n  // if body content is json\n  if (opt.json && method !== 'GET' && method !== 'HEAD') {\n    ensureHeader(headers, 'Content-Type', mimeTypeJson);\n    opt.body = JSON.stringify(opt.body);\n  }\n  opt.method = method;\n  opt.url = url;\n  opt.headers = headers;\n  delete opt.query;\n  delete opt.json;\n  return request(opt, cb);\n}","map":{"version":3,"names":["queryString","require","setQuery","assign","ensureHeader","request","mimeTypeJson","noop","module","exports","xhrRequest","url","opt","cb","TypeError","defaultResponse","json","responseType","headers","method","toUpperCase","query","stringify","body","JSON"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/xhr-request/index.js"],"sourcesContent":["var queryString = require('query-string')\nvar setQuery = require('url-set-query')\nvar assign = require('object-assign')\nvar ensureHeader = require('./lib/ensure-header.js')\n\n// this is replaced in the browser\nvar request = require('./lib/request.js')\n\nvar mimeTypeJson = 'application/json'\nvar noop = function () {}\n\nmodule.exports = xhrRequest\nfunction xhrRequest (url, opt, cb) {\n  if (!url || typeof url !== 'string') {\n    throw new TypeError('must specify a URL')\n  }\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (cb && typeof cb !== 'function') {\n    throw new TypeError('expected cb to be undefined or a function')\n  }\n\n  cb = cb || noop\n  opt = opt || {}\n\n  var defaultResponse = opt.json ? 'json' : 'text'\n  opt = assign({ responseType: defaultResponse }, opt)\n\n  var headers = opt.headers || {}\n  var method = (opt.method || 'GET').toUpperCase()\n  var query = opt.query\n  if (query) {\n    if (typeof query !== 'string') {\n      query = queryString.stringify(query)\n    }\n    url = setQuery(url, query)\n  }\n\n  // allow json response\n  if (opt.responseType === 'json') {\n    ensureHeader(headers, 'Accept', mimeTypeJson)\n  }\n\n  // if body content is json\n  if (opt.json && method !== 'GET' && method !== 'HEAD') {\n    ensureHeader(headers, 'Content-Type', mimeTypeJson)\n    opt.body = JSON.stringify(opt.body)\n  }\n\n  opt.method = method\n  opt.url = url\n  opt.headers = headers\n  delete opt.query\n  delete opt.json\n\n  return request(opt, cb)\n}\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AACzC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,eAAe,CAAC;AACvC,IAAIE,MAAM,GAAGF,OAAO,CAAC,eAAe,CAAC;AACrC,IAAIG,YAAY,GAAGH,OAAO,CAAC,wBAAwB,CAAC;;AAEpD;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,kBAAkB,CAAC;AAEzC,IAAIK,YAAY,GAAG,kBAAkB;AACrC,IAAIC,IAAI,GAAG,SAAAA,CAAA,EAAY,CAAC,CAAC;AAEzBC,MAAM,CAACC,OAAO,GAAGC,UAAU;AAC3B,SAASA,UAAUA,CAAEC,GAAG,EAAEC,GAAG,EAAEC,EAAE,EAAE;EACjC,IAAI,CAACF,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnC,MAAM,IAAIG,SAAS,CAAC,oBAAoB,CAAC;EAC3C;EACA,IAAI,OAAOF,GAAG,KAAK,UAAU,EAAE;IAC7BC,EAAE,GAAGD,GAAG;IACRA,GAAG,GAAG,CAAC,CAAC;EACV;EACA,IAAIC,EAAE,IAAI,OAAOA,EAAE,KAAK,UAAU,EAAE;IAClC,MAAM,IAAIC,SAAS,CAAC,2CAA2C,CAAC;EAClE;EAEAD,EAAE,GAAGA,EAAE,IAAIN,IAAI;EACfK,GAAG,GAAGA,GAAG,IAAI,CAAC,CAAC;EAEf,IAAIG,eAAe,GAAGH,GAAG,CAACI,IAAI,GAAG,MAAM,GAAG,MAAM;EAChDJ,GAAG,GAAGT,MAAM,CAAC;IAAEc,YAAY,EAAEF;EAAgB,CAAC,EAAEH,GAAG,CAAC;EAEpD,IAAIM,OAAO,GAAGN,GAAG,CAACM,OAAO,IAAI,CAAC,CAAC;EAC/B,IAAIC,MAAM,GAAG,CAACP,GAAG,CAACO,MAAM,IAAI,KAAK,EAAEC,WAAW,CAAC,CAAC;EAChD,IAAIC,KAAK,GAAGT,GAAG,CAACS,KAAK;EACrB,IAAIA,KAAK,EAAE;IACT,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7BA,KAAK,GAAGrB,WAAW,CAACsB,SAAS,CAACD,KAAK,CAAC;IACtC;IACAV,GAAG,GAAGT,QAAQ,CAACS,GAAG,EAAEU,KAAK,CAAC;EAC5B;;EAEA;EACA,IAAIT,GAAG,CAACK,YAAY,KAAK,MAAM,EAAE;IAC/Bb,YAAY,CAACc,OAAO,EAAE,QAAQ,EAAEZ,YAAY,CAAC;EAC/C;;EAEA;EACA,IAAIM,GAAG,CAACI,IAAI,IAAIG,MAAM,KAAK,KAAK,IAAIA,MAAM,KAAK,MAAM,EAAE;IACrDf,YAAY,CAACc,OAAO,EAAE,cAAc,EAAEZ,YAAY,CAAC;IACnDM,GAAG,CAACW,IAAI,GAAGC,IAAI,CAACF,SAAS,CAACV,GAAG,CAACW,IAAI,CAAC;EACrC;EAEAX,GAAG,CAACO,MAAM,GAAGA,MAAM;EACnBP,GAAG,CAACD,GAAG,GAAGA,GAAG;EACbC,GAAG,CAACM,OAAO,GAAGA,OAAO;EACrB,OAAON,GAAG,CAACS,KAAK;EAChB,OAAOT,GAAG,CAACI,IAAI;EAEf,OAAOX,OAAO,CAACO,GAAG,EAAEC,EAAE,CAAC;AACzB"},"metadata":{},"sourceType":"script","externalDependencies":[]}