{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Infecter = void 0;\nclass Infecter {\n  constructor(container) {\n    this.container = container;\n  }\n  startInfection(particle, stage) {\n    const options = this.container.actualOptions,\n      stages = options.infection.stages,\n      stagesCount = stages.length;\n    if (stage > stagesCount || stage < 0) {\n      return;\n    }\n    particle.infection.delay = 0;\n    particle.infection.delayStage = stage;\n  }\n  updateInfectionStage(particle, stage) {\n    const options = this.container.actualOptions,\n      stagesCount = options.infection.stages.length;\n    if (stage > stagesCount || stage < 0 || particle.infection.stage !== undefined && particle.infection.stage > stage) {\n      return;\n    }\n    particle.infection.stage = stage;\n    particle.infection.time = 0;\n  }\n  updateInfection(particle, delta) {\n    const options = this.container.actualOptions,\n      infection = options.infection,\n      stages = options.infection.stages,\n      stagesCount = stages.length;\n    if (particle.infection.delay !== undefined && particle.infection.delayStage !== undefined) {\n      const stage = particle.infection.delayStage;\n      if (stage > stagesCount || stage < 0) {\n        return;\n      }\n      if (particle.infection.delay >= infection.delay * 1000) {\n        particle.infection.stage = stage;\n        particle.infection.time = 0;\n        delete particle.infection.delay;\n        delete particle.infection.delayStage;\n      } else {\n        particle.infection.delay += delta;\n      }\n    } else {\n      delete particle.infection.delay;\n      delete particle.infection.delayStage;\n    }\n    if (particle.infection.stage !== undefined && particle.infection.time !== undefined) {\n      const infectionStage = stages[particle.infection.stage];\n      if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n        if (particle.infection.time > infectionStage.duration * 1000) {\n          this.nextInfectionStage(particle);\n        } else {\n          particle.infection.time += delta;\n        }\n      } else {\n        particle.infection.time += delta;\n      }\n    } else {\n      delete particle.infection.stage;\n      delete particle.infection.time;\n    }\n  }\n  nextInfectionStage(particle) {\n    const options = this.container.actualOptions,\n      stagesCount = options.infection.stages.length;\n    if (stagesCount <= 0 || particle.infection.stage === undefined) {\n      return;\n    }\n    particle.infection.time = 0;\n    if (stagesCount <= ++particle.infection.stage) {\n      if (options.infection.cure) {\n        delete particle.infection.stage;\n        delete particle.infection.time;\n        return;\n      } else {\n        particle.infection.stage = 0;\n        particle.infection.time = 0;\n      }\n    }\n  }\n}\nexports.Infecter = Infecter;","map":{"version":3,"names":["Object","defineProperty","exports","value","Infecter","constructor","container","startInfection","particle","stage","options","actualOptions","stages","infection","stagesCount","length","delay","delayStage","updateInfectionStage","undefined","time","updateInfection","delta","infectionStage","duration","nextInfectionStage","cure"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/tsparticles/Plugins/Infection/Infecter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Infecter = void 0;\nclass Infecter {\n    constructor(container) {\n        this.container = container;\n    }\n    startInfection(particle, stage) {\n        const options = this.container.actualOptions, stages = options.infection.stages, stagesCount = stages.length;\n        if (stage > stagesCount || stage < 0) {\n            return;\n        }\n        particle.infection.delay = 0;\n        particle.infection.delayStage = stage;\n    }\n    updateInfectionStage(particle, stage) {\n        const options = this.container.actualOptions, stagesCount = options.infection.stages.length;\n        if (stage > stagesCount ||\n            stage < 0 ||\n            (particle.infection.stage !== undefined && particle.infection.stage > stage)) {\n            return;\n        }\n        particle.infection.stage = stage;\n        particle.infection.time = 0;\n    }\n    updateInfection(particle, delta) {\n        const options = this.container.actualOptions, infection = options.infection, stages = options.infection.stages, stagesCount = stages.length;\n        if (particle.infection.delay !== undefined && particle.infection.delayStage !== undefined) {\n            const stage = particle.infection.delayStage;\n            if (stage > stagesCount || stage < 0) {\n                return;\n            }\n            if (particle.infection.delay >= infection.delay * 1000) {\n                particle.infection.stage = stage;\n                particle.infection.time = 0;\n                delete particle.infection.delay;\n                delete particle.infection.delayStage;\n            }\n            else {\n                particle.infection.delay += delta;\n            }\n        }\n        else {\n            delete particle.infection.delay;\n            delete particle.infection.delayStage;\n        }\n        if (particle.infection.stage !== undefined && particle.infection.time !== undefined) {\n            const infectionStage = stages[particle.infection.stage];\n            if (infectionStage.duration !== undefined && infectionStage.duration >= 0) {\n                if (particle.infection.time > infectionStage.duration * 1000) {\n                    this.nextInfectionStage(particle);\n                }\n                else {\n                    particle.infection.time += delta;\n                }\n            }\n            else {\n                particle.infection.time += delta;\n            }\n        }\n        else {\n            delete particle.infection.stage;\n            delete particle.infection.time;\n        }\n    }\n    nextInfectionStage(particle) {\n        const options = this.container.actualOptions, stagesCount = options.infection.stages.length;\n        if (stagesCount <= 0 || particle.infection.stage === undefined) {\n            return;\n        }\n        particle.infection.time = 0;\n        if (stagesCount <= ++particle.infection.stage) {\n            if (options.infection.cure) {\n                delete particle.infection.stage;\n                delete particle.infection.time;\n                return;\n            }\n            else {\n                particle.infection.stage = 0;\n                particle.infection.time = 0;\n            }\n        }\n    }\n}\nexports.Infecter = Infecter;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}