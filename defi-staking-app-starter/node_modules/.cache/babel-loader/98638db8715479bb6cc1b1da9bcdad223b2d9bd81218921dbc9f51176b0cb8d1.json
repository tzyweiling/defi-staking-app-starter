{"ast":null,"code":"// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nconst encode = tree => {\n  const padEven = str => str.length % 2 === 0 ? str : \"0\" + str;\n  const uint = num => padEven(num.toString(16));\n  const length = (len, add) => len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n  const dataTree = tree => {\n    if (typeof tree === \"string\") {\n      const hex = tree.slice(2);\n      const pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      const hex = tree.map(dataTree).join(\"\");\n      const pre = length(hex.length / 2, 192);\n      return pre + hex;\n    }\n  };\n  return \"0x\" + dataTree(tree);\n};\nconst decode = hex => {\n  let i = 2;\n  const parseTree = () => {\n    if (i >= hex.length) throw \"\";\n    const head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n  const parseLength = () => {\n    const len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n  const parseHex = () => {\n    const len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n  const parseList = () => {\n    const lim = parseLength() * 2 + i;\n    let list = [];\n    while (i < lim) list.push(parseTree());\n    return list;\n  };\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\nmodule.exports = {\n  encode,\n  decode\n};","map":{"version":3,"names":["encode","tree","padEven","str","length","uint","num","toString","len","add","dataTree","hex","slice","pre","map","join","decode","i","parseTree","head","parseHex","parseList","parseLength","parseInt","lim","list","push","e","module","exports"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/rlp.js"],"sourcesContent":["// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nconst encode = tree => {\n  const padEven = str => str.length % 2 === 0 ? str : \"0\" + str;\n\n  const uint = num => padEven(num.toString(16));\n\n  const length = (len, add) => len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n\n  const dataTree = tree => {\n    if (typeof tree === \"string\") {\n      const hex = tree.slice(2);\n      const pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      const hex = tree.map(dataTree).join(\"\");\n      const pre = length(hex.length / 2, 192);\n      return pre + hex;\n    }\n  };\n\n  return \"0x\" + dataTree(tree);\n};\n\nconst decode = hex => {\n  let i = 2;\n\n  const parseTree = () => {\n    if (i >= hex.length) throw \"\";\n    const head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n\n  const parseLength = () => {\n    const len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n\n  const parseHex = () => {\n    const len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n\n  const parseList = () => {\n    const lim = parseLength() * 2 + i;\n    let list = [];\n    while (i < lim) list.push(parseTree());\n    return list;\n  };\n\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\n\nmodule.exports = { encode, decode };"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}