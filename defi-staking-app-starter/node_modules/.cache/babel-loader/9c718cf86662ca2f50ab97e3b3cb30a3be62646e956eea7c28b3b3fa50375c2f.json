{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction bounceHorizontal(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceHorizontal || data.outMode === \"bounceHorizontal\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n  const velocity = data.particle.velocity.x;\n  if (!(data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0)) {\n    return;\n  }\n  const newVelocity = Utils_1.getValue(data.particle.options.bounce.horizontal);\n  data.particle.velocity.x *= -newVelocity;\n  const minPos = data.offset.x + data.size;\n  if (data.bounds.right >= data.canvasSize.width) {\n    data.particle.position.x = data.canvasSize.width - minPos;\n  } else if (data.bounds.left <= 0) {\n    data.particle.position.x = minPos;\n  }\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\nfunction bounceVertical(data) {\n  if (!(data.outMode === Enums_1.OutMode.bounce || data.outMode === Enums_1.OutMode.bounceVertical || data.outMode === \"bounceVertical\" || data.outMode === Enums_1.OutMode.split)) {\n    return;\n  }\n  const velocity = data.particle.velocity.y;\n  if (!(data.direction === Enums_1.OutModeDirection.bottom && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0)) {\n    return;\n  }\n  const newVelocity = Utils_1.getValue(data.particle.options.bounce.vertical);\n  data.particle.velocity.y *= -newVelocity;\n  const minPos = data.offset.y + data.size;\n  if (data.bounds.bottom >= data.canvasSize.height) {\n    data.particle.position.y = data.canvasSize.height - minPos;\n  } else if (data.bounds.top <= 0) {\n    data.particle.position.y = minPos;\n  }\n  if (data.outMode === Enums_1.OutMode.split) {\n    data.particle.destroy();\n  }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n  switch (destroy) {\n    case Enums_1.DestroyType.max:\n      if (value >= maxValue) {\n        particle.destroy();\n      }\n      break;\n    case Enums_1.DestroyType.min:\n      if (value <= minValue) {\n        particle.destroy();\n      }\n      break;\n  }\n}\nclass Updater {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n  update(delta) {\n    if (this.particle.destroyed) {\n      return;\n    }\n    this.updateLife(delta);\n    if (this.particle.destroyed || this.particle.spawning) {\n      return;\n    }\n    this.updateOpacity(delta);\n    this.updateSize(delta);\n    this.updateAngle(delta);\n    this.updateTilt(delta);\n    this.updateRoll(delta);\n    this.updateWobble(delta);\n    this.updateColor(delta);\n    this.updateStrokeColor(delta);\n    this.updateOutModes(delta);\n  }\n  updateLife(delta) {\n    const particle = this.particle;\n    let justSpawned = false;\n    if (particle.spawning) {\n      particle.life.delayTime += delta.value;\n      if (particle.life.delayTime >= particle.life.delay) {\n        justSpawned = true;\n        particle.spawning = false;\n        particle.life.delayTime = 0;\n        particle.life.time = 0;\n      }\n    }\n    if (particle.life.duration === -1) {\n      return;\n    }\n    if (particle.spawning) {\n      return;\n    }\n    if (justSpawned) {\n      particle.life.time = 0;\n    } else {\n      particle.life.time += delta.value;\n    }\n    if (particle.life.time < particle.life.duration) {\n      return;\n    }\n    particle.life.time = 0;\n    if (particle.life.count > 0) {\n      particle.life.count--;\n    }\n    if (particle.life.count === 0) {\n      particle.destroy();\n      return;\n    }\n    const canvasSize = this.container.canvas.size;\n    particle.position.x = Utils_1.randomInRange(Utils_1.setRangeValue(0, canvasSize.width));\n    particle.position.y = Utils_1.randomInRange(Utils_1.setRangeValue(0, canvasSize.height));\n    particle.spawning = true;\n    particle.life.delayTime = 0;\n    particle.life.time = 0;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    particle.life.delay = Utils_1.getValue(lifeOptions.delay) * 1000;\n    particle.life.duration = Utils_1.getValue(lifeOptions.duration) * 1000;\n  }\n  updateOpacity(delta) {\n    var _a, _b;\n    const particle = this.particle;\n    const opacityOpt = particle.options.opacity;\n    const opacityAnim = opacityOpt.animation;\n    const minValue = particle.opacity.min;\n    const maxValue = particle.opacity.max;\n    if (!(!particle.destroyed && opacityAnim.enable && (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n      return;\n    }\n    switch (particle.opacity.status) {\n      case Enums_1.AnimationStatus.increasing:\n        if (particle.opacity.value >= maxValue) {\n          particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n          particle.loops.opacity++;\n        } else {\n          particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        }\n        break;\n      case Enums_1.AnimationStatus.decreasing:\n        if (particle.opacity.value <= minValue) {\n          particle.opacity.status = Enums_1.AnimationStatus.increasing;\n          particle.loops.opacity++;\n        } else {\n          particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n        }\n        break;\n    }\n    checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n    if (!particle.destroyed) {\n      particle.opacity.value = Utils_1.clamp(particle.opacity.value, minValue, maxValue);\n    }\n  }\n  updateSize(delta) {\n    var _a;\n    const particle = this.particle;\n    const sizeOpt = particle.options.size;\n    const sizeAnim = sizeOpt.animation;\n    const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const minValue = particle.size.min;\n    const maxValue = particle.size.max;\n    if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n      return;\n    }\n    switch (particle.size.status) {\n      case Enums_1.AnimationStatus.increasing:\n        if (particle.size.value >= maxValue) {\n          particle.size.status = Enums_1.AnimationStatus.decreasing;\n          particle.loops.size++;\n        } else {\n          particle.size.value += sizeVelocity;\n        }\n        break;\n      case Enums_1.AnimationStatus.decreasing:\n        if (particle.size.value <= minValue) {\n          particle.size.status = Enums_1.AnimationStatus.increasing;\n          particle.loops.size++;\n        } else {\n          particle.size.value -= sizeVelocity;\n        }\n    }\n    checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n    if (!particle.destroyed) {\n      particle.size.value = Utils_1.clamp(particle.size.value, minValue, maxValue);\n    }\n  }\n  updateAngle(delta) {\n    var _a;\n    const particle = this.particle;\n    const rotate = particle.options.rotate;\n    const rotateAnimation = rotate.animation;\n    const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n    if (!rotateAnimation.enable) {\n      return;\n    }\n    switch (particle.rotate.status) {\n      case Enums_1.AnimationStatus.increasing:\n        particle.rotate.value += speed;\n        if (particle.rotate.value > max) {\n          particle.rotate.value -= max;\n        }\n        break;\n      case Enums_1.AnimationStatus.decreasing:\n      default:\n        particle.rotate.value -= speed;\n        if (particle.rotate.value < 0) {\n          particle.rotate.value += max;\n        }\n        break;\n    }\n  }\n  updateTilt(delta) {\n    var _a;\n    const particle = this.particle;\n    const tilt = particle.options.tilt;\n    const tiltAnimation = tilt.animation;\n    const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n    const max = 2 * Math.PI;\n    if (!tiltAnimation.enable) {\n      return;\n    }\n    switch (particle.tilt.status) {\n      case Enums_1.AnimationStatus.increasing:\n        particle.tilt.value += speed;\n        if (particle.tilt.value > max) {\n          particle.tilt.value -= max;\n        }\n        break;\n      case Enums_1.AnimationStatus.decreasing:\n      default:\n        particle.tilt.value -= speed;\n        if (particle.tilt.value < 0) {\n          particle.tilt.value += max;\n        }\n        break;\n    }\n  }\n  updateRoll(delta) {\n    const particle = this.particle;\n    const roll = particle.options.roll;\n    const speed = particle.rollSpeed * delta.factor;\n    const max = 2 * Math.PI;\n    if (!roll.enable) {\n      return;\n    }\n    particle.rollAngle += speed;\n    if (particle.rollAngle > max) {\n      particle.rollAngle -= max;\n    }\n  }\n  updateWobble(delta) {\n    const particle = this.particle;\n    const wobble = particle.options.wobble;\n    const speed = particle.wobbleSpeed * delta.factor;\n    const distance = particle.wobbleDistance * delta.factor / (1000 / 60);\n    const max = 2 * Math.PI;\n    if (!wobble.enable) {\n      return;\n    }\n    particle.wobbleAngle += speed;\n    if (particle.wobbleAngle > max) {\n      particle.wobbleAngle -= max;\n    }\n    particle.position.x += distance * Math.cos(particle.wobbleAngle);\n    particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n  }\n  updateColor(delta) {\n    var _a, _b, _c;\n    const particle = this.particle;\n    const animationOptions = particle.options.color.animation;\n    if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n    }\n    if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n    }\n    if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n      this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n    }\n  }\n  updateStrokeColor(delta) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const particle = this.particle;\n    if (!particle.stroke.color) {\n      return;\n    }\n    const animationOptions = particle.stroke.color.animation;\n    const valueAnimations = animationOptions;\n    if (valueAnimations.enable !== undefined) {\n      const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n      if (hue) {\n        this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n      }\n    } else {\n      const hslAnimations = animationOptions;\n      const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n      if (h) {\n        this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n      }\n      const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n      if (s) {\n        this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n      }\n      const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n      if (l) {\n        this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n      }\n    }\n  }\n  updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n    var _a;\n    const colorValue = value;\n    if (!colorValue || !valueAnimation.enable) {\n      return;\n    }\n    const offset = Utils_1.randomInRange(valueAnimation.offset);\n    const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n    if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n      colorValue.value += velocity;\n      if (decrease && colorValue.value > max) {\n        colorValue.status = Enums_1.AnimationStatus.decreasing;\n        colorValue.value -= colorValue.value % max;\n      }\n    } else {\n      colorValue.value -= velocity;\n      if (colorValue.value < 0) {\n        colorValue.status = Enums_1.AnimationStatus.increasing;\n        colorValue.value += colorValue.value;\n      }\n    }\n    if (colorValue.value > max) {\n      colorValue.value %= max;\n    }\n  }\n  updateOutModes(delta) {\n    var _a, _b, _c, _d;\n    const outModes = this.particle.options.move.outModes;\n    this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n    this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n    this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n    this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n  }\n  updateOutMode(delta, outMode, direction) {\n    const container = this.container;\n    const particle = this.particle;\n    switch (outMode) {\n      case Enums_1.OutMode.bounce:\n      case Enums_1.OutMode.bounceVertical:\n      case Enums_1.OutMode.bounceHorizontal:\n      case \"bounceVertical\":\n      case \"bounceHorizontal\":\n      case Enums_1.OutMode.split:\n        this.updateBounce(delta, direction, outMode);\n        break;\n      case Enums_1.OutMode.destroy:\n        if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          container.particles.remove(particle, undefined, true);\n        }\n        break;\n      case Enums_1.OutMode.out:\n        if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n          this.fixOutOfCanvasPosition(direction);\n        }\n        break;\n      case Enums_1.OutMode.none:\n        this.bounceNone(direction);\n        break;\n    }\n  }\n  fixOutOfCanvasPosition(direction) {\n    const container = this.container;\n    const particle = this.particle;\n    const wrap = particle.options.move.warp;\n    const canvasSize = container.canvas.size;\n    const newPos = {\n      bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n      left: -particle.getRadius() - particle.offset.x,\n      right: canvasSize.width + particle.getRadius() + particle.offset.x,\n      top: -particle.getRadius() - particle.offset.y\n    };\n    const sizeValue = particle.getRadius();\n    const nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n    if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n      particle.position.x = newPos.left;\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    } else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n      particle.position.x = newPos.right;\n      if (!wrap) {\n        particle.position.y = Math.random() * canvasSize.height;\n      }\n    }\n    if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n      particle.position.y = newPos.top;\n    } else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n      if (!wrap) {\n        particle.position.x = Math.random() * canvasSize.width;\n      }\n      particle.position.y = newPos.bottom;\n    }\n  }\n  updateBounce(delta, direction, outMode) {\n    const container = this.container;\n    const particle = this.particle;\n    let handled = false;\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particleBounce !== undefined) {\n        handled = plugin.particleBounce(particle, delta, direction);\n      }\n      if (handled) {\n        break;\n      }\n    }\n    if (handled) {\n      return;\n    }\n    const pos = particle.getPosition(),\n      offset = particle.offset,\n      size = particle.getRadius(),\n      bounds = Utils_1.calculateBounds(pos, size),\n      canvasSize = container.canvas.size;\n    bounceHorizontal({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n    bounceVertical({\n      particle,\n      outMode,\n      direction,\n      bounds,\n      canvasSize,\n      offset,\n      size\n    });\n  }\n  bounceNone(direction) {\n    const particle = this.particle;\n    if (particle.options.move.distance.horizontal && (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right) || particle.options.move.distance.vertical && (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom)) {\n      return;\n    }\n    const gravityOptions = particle.options.move.gravity;\n    const container = this.container;\n    if (!gravityOptions.enable) {\n      if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n        container.particles.remove(particle);\n      }\n    } else {\n      const position = particle.position;\n      if (!gravityOptions.inverse && position.y > container.canvas.size.height && direction === Enums_1.OutModeDirection.bottom || gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top) {\n        container.particles.remove(particle);\n      }\n    }\n  }\n}\nexports.Updater = Updater;","map":{"version":3,"names":["Object","defineProperty","exports","value","Updater","Utils_1","require","Enums_1","bounceHorizontal","data","outMode","OutMode","bounce","split","velocity","particle","x","direction","OutModeDirection","right","bounds","canvasSize","width","left","newVelocity","getValue","options","horizontal","minPos","offset","size","position","destroy","bounceVertical","y","bottom","height","top","vertical","checkDestroy","minValue","maxValue","DestroyType","max","min","constructor","container","update","delta","destroyed","updateLife","spawning","updateOpacity","updateSize","updateAngle","updateTilt","updateRoll","updateWobble","updateColor","updateStrokeColor","updateOutModes","justSpawned","life","delayTime","delay","time","duration","count","canvas","randomInRange","setRangeValue","reset","lifeOptions","_a","_b","opacityOpt","opacity","opacityAnim","animation","enable","loops","status","AnimationStatus","increasing","decreasing","factor","clamp","sizeOpt","sizeAnim","sizeVelocity","rotate","rotateAnimation","speed","Math","PI","tilt","tiltAnimation","roll","rollSpeed","rollAngle","wobble","wobbleSpeed","distance","wobbleDistance","wobbleAngle","cos","abs","sin","_c","animationOptions","color","h","undefined","updateColorValue","s","l","_d","_e","_f","_g","_h","_j","_k","_l","_m","stroke","valueAnimations","hue","strokeColor","hslAnimations","valueAnimation","decrease","colorValue","outModes","move","updateOutMode","default","updateBounce","isPointInside","getRadius","particles","remove","out","fixOutOfCanvasPosition","none","bounceNone","wrap","warp","newPos","sizeValue","nextBounds","calculateBounds","random","handled","plugin","plugins","particleBounce","pos","getPosition","gravityOptions","gravity","inverse"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/tsparticles/Core/Particle/Updater.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Updater = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction bounceHorizontal(data) {\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceHorizontal ||\n        data.outMode === \"bounceHorizontal\" ||\n        data.outMode === Enums_1.OutMode.split)) {\n        return;\n    }\n    const velocity = data.particle.velocity.x;\n    if (!((data.direction === Enums_1.OutModeDirection.right && data.bounds.right >= data.canvasSize.width && velocity > 0) ||\n        (data.direction === Enums_1.OutModeDirection.left && data.bounds.left <= 0 && velocity < 0))) {\n        return;\n    }\n    const newVelocity = Utils_1.getValue(data.particle.options.bounce.horizontal);\n    data.particle.velocity.x *= -newVelocity;\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= 0) {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === Enums_1.OutMode.split) {\n        data.particle.destroy();\n    }\n}\nfunction bounceVertical(data) {\n    if (!(data.outMode === Enums_1.OutMode.bounce ||\n        data.outMode === Enums_1.OutMode.bounceVertical ||\n        data.outMode === \"bounceVertical\" ||\n        data.outMode === Enums_1.OutMode.split)) {\n        return;\n    }\n    const velocity = data.particle.velocity.y;\n    if (!((data.direction === Enums_1.OutModeDirection.bottom &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > 0) ||\n        (data.direction === Enums_1.OutModeDirection.top && data.bounds.top <= 0 && velocity < 0))) {\n        return;\n    }\n    const newVelocity = Utils_1.getValue(data.particle.options.bounce.vertical);\n    data.particle.velocity.y *= -newVelocity;\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= 0) {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === Enums_1.OutMode.split) {\n        data.particle.destroy();\n    }\n}\nfunction checkDestroy(particle, destroy, value, minValue, maxValue) {\n    switch (destroy) {\n        case Enums_1.DestroyType.max:\n            if (value >= maxValue) {\n                particle.destroy();\n            }\n            break;\n        case Enums_1.DestroyType.min:\n            if (value <= minValue) {\n                particle.destroy();\n            }\n            break;\n    }\n}\nclass Updater {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    update(delta) {\n        if (this.particle.destroyed) {\n            return;\n        }\n        this.updateLife(delta);\n        if (this.particle.destroyed || this.particle.spawning) {\n            return;\n        }\n        this.updateOpacity(delta);\n        this.updateSize(delta);\n        this.updateAngle(delta);\n        this.updateTilt(delta);\n        this.updateRoll(delta);\n        this.updateWobble(delta);\n        this.updateColor(delta);\n        this.updateStrokeColor(delta);\n        this.updateOutModes(delta);\n    }\n    updateLife(delta) {\n        const particle = this.particle;\n        let justSpawned = false;\n        if (particle.spawning) {\n            particle.life.delayTime += delta.value;\n            if (particle.life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                particle.life.delayTime = 0;\n                particle.life.time = 0;\n            }\n        }\n        if (particle.life.duration === -1) {\n            return;\n        }\n        if (particle.spawning) {\n            return;\n        }\n        if (justSpawned) {\n            particle.life.time = 0;\n        }\n        else {\n            particle.life.time += delta.value;\n        }\n        if (particle.life.time < particle.life.duration) {\n            return;\n        }\n        particle.life.time = 0;\n        if (particle.life.count > 0) {\n            particle.life.count--;\n        }\n        if (particle.life.count === 0) {\n            particle.destroy();\n            return;\n        }\n        const canvasSize = this.container.canvas.size;\n        particle.position.x = Utils_1.randomInRange(Utils_1.setRangeValue(0, canvasSize.width));\n        particle.position.y = Utils_1.randomInRange(Utils_1.setRangeValue(0, canvasSize.height));\n        particle.spawning = true;\n        particle.life.delayTime = 0;\n        particle.life.time = 0;\n        particle.reset();\n        const lifeOptions = particle.options.life;\n        particle.life.delay = Utils_1.getValue(lifeOptions.delay) * 1000;\n        particle.life.duration = Utils_1.getValue(lifeOptions.duration) * 1000;\n    }\n    updateOpacity(delta) {\n        var _a, _b;\n        const particle = this.particle;\n        const opacityOpt = particle.options.opacity;\n        const opacityAnim = opacityOpt.animation;\n        const minValue = particle.opacity.min;\n        const maxValue = particle.opacity.max;\n        if (!(!particle.destroyed &&\n            opacityAnim.enable &&\n            (opacityAnim.count <= 0 || particle.loops.opacity < opacityAnim.count))) {\n            return;\n        }\n        switch (particle.opacity.status) {\n            case Enums_1.AnimationStatus.increasing:\n                if (particle.opacity.value >= maxValue) {\n                    particle.opacity.status = Enums_1.AnimationStatus.decreasing;\n                    particle.loops.opacity++;\n                }\n                else {\n                    particle.opacity.value += ((_a = particle.opacity.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n                if (particle.opacity.value <= minValue) {\n                    particle.opacity.status = Enums_1.AnimationStatus.increasing;\n                    particle.loops.opacity++;\n                }\n                else {\n                    particle.opacity.value -= ((_b = particle.opacity.velocity) !== null && _b !== void 0 ? _b : 0) * delta.factor;\n                }\n                break;\n        }\n        checkDestroy(particle, opacityAnim.destroy, particle.opacity.value, minValue, maxValue);\n        if (!particle.destroyed) {\n            particle.opacity.value = Utils_1.clamp(particle.opacity.value, minValue, maxValue);\n        }\n    }\n    updateSize(delta) {\n        var _a;\n        const particle = this.particle;\n        const sizeOpt = particle.options.size;\n        const sizeAnim = sizeOpt.animation;\n        const sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const minValue = particle.size.min;\n        const maxValue = particle.size.max;\n        if (!(!particle.destroyed && sizeAnim.enable && (sizeAnim.count <= 0 || particle.loops.size < sizeAnim.count))) {\n            return;\n        }\n        switch (particle.size.status) {\n            case Enums_1.AnimationStatus.increasing:\n                if (particle.size.value >= maxValue) {\n                    particle.size.status = Enums_1.AnimationStatus.decreasing;\n                    particle.loops.size++;\n                }\n                else {\n                    particle.size.value += sizeVelocity;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n                if (particle.size.value <= minValue) {\n                    particle.size.status = Enums_1.AnimationStatus.increasing;\n                    particle.loops.size++;\n                }\n                else {\n                    particle.size.value -= sizeVelocity;\n                }\n        }\n        checkDestroy(particle, sizeAnim.destroy, particle.size.value, minValue, maxValue);\n        if (!particle.destroyed) {\n            particle.size.value = Utils_1.clamp(particle.size.value, minValue, maxValue);\n        }\n    }\n    updateAngle(delta) {\n        var _a;\n        const particle = this.particle;\n        const rotate = particle.options.rotate;\n        const rotateAnimation = rotate.animation;\n        const speed = ((_a = particle.rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (!rotateAnimation.enable) {\n            return;\n        }\n        switch (particle.rotate.status) {\n            case Enums_1.AnimationStatus.increasing:\n                particle.rotate.value += speed;\n                if (particle.rotate.value > max) {\n                    particle.rotate.value -= max;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n            default:\n                particle.rotate.value -= speed;\n                if (particle.rotate.value < 0) {\n                    particle.rotate.value += max;\n                }\n                break;\n        }\n    }\n    updateTilt(delta) {\n        var _a;\n        const particle = this.particle;\n        const tilt = particle.options.tilt;\n        const tiltAnimation = tilt.animation;\n        const speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor;\n        const max = 2 * Math.PI;\n        if (!tiltAnimation.enable) {\n            return;\n        }\n        switch (particle.tilt.status) {\n            case Enums_1.AnimationStatus.increasing:\n                particle.tilt.value += speed;\n                if (particle.tilt.value > max) {\n                    particle.tilt.value -= max;\n                }\n                break;\n            case Enums_1.AnimationStatus.decreasing:\n            default:\n                particle.tilt.value -= speed;\n                if (particle.tilt.value < 0) {\n                    particle.tilt.value += max;\n                }\n                break;\n        }\n    }\n    updateRoll(delta) {\n        const particle = this.particle;\n        const roll = particle.options.roll;\n        const speed = particle.rollSpeed * delta.factor;\n        const max = 2 * Math.PI;\n        if (!roll.enable) {\n            return;\n        }\n        particle.rollAngle += speed;\n        if (particle.rollAngle > max) {\n            particle.rollAngle -= max;\n        }\n    }\n    updateWobble(delta) {\n        const particle = this.particle;\n        const wobble = particle.options.wobble;\n        const speed = particle.wobbleSpeed * delta.factor;\n        const distance = (particle.wobbleDistance * delta.factor) / (1000 / 60);\n        const max = 2 * Math.PI;\n        if (!wobble.enable) {\n            return;\n        }\n        particle.wobbleAngle += speed;\n        if (particle.wobbleAngle > max) {\n            particle.wobbleAngle -= max;\n        }\n        particle.position.x += distance * Math.cos(particle.wobbleAngle);\n        particle.position.y += distance * Math.abs(Math.sin(particle.wobbleAngle));\n    }\n    updateColor(delta) {\n        var _a, _b, _c;\n        const particle = this.particle;\n        const animationOptions = particle.options.color.animation;\n        if (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.h, animationOptions.h, 360, false);\n        }\n        if (((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.s, animationOptions.s, 100, true);\n        }\n        if (((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l) !== undefined) {\n            this.updateColorValue(particle, delta, particle.color.l, animationOptions.l, 100, true);\n        }\n    }\n    updateStrokeColor(delta) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const particle = this.particle;\n        if (!particle.stroke.color) {\n            return;\n        }\n        const animationOptions = particle.stroke.color.animation;\n        const valueAnimations = animationOptions;\n        if (valueAnimations.enable !== undefined) {\n            const hue = (_b = (_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h) !== null && _b !== void 0 ? _b : (_c = particle.color) === null || _c === void 0 ? void 0 : _c.h;\n            if (hue) {\n                this.updateColorValue(particle, delta, hue, valueAnimations, 360, false);\n            }\n        }\n        else {\n            const hslAnimations = animationOptions;\n            const h = (_e = (_d = particle.strokeColor) === null || _d === void 0 ? void 0 : _d.h) !== null && _e !== void 0 ? _e : (_f = particle.color) === null || _f === void 0 ? void 0 : _f.h;\n            if (h) {\n                this.updateColorValue(particle, delta, h, hslAnimations.h, 360, false);\n            }\n            const s = (_h = (_g = particle.strokeColor) === null || _g === void 0 ? void 0 : _g.s) !== null && _h !== void 0 ? _h : (_j = particle.color) === null || _j === void 0 ? void 0 : _j.s;\n            if (s) {\n                this.updateColorValue(particle, delta, s, hslAnimations.s, 100, true);\n            }\n            const l = (_l = (_k = particle.strokeColor) === null || _k === void 0 ? void 0 : _k.l) !== null && _l !== void 0 ? _l : (_m = particle.color) === null || _m === void 0 ? void 0 : _m.l;\n            if (l) {\n                this.updateColorValue(particle, delta, l, hslAnimations.l, 100, true);\n            }\n        }\n    }\n    updateColorValue(particle, delta, value, valueAnimation, max, decrease) {\n        var _a;\n        const colorValue = value;\n        if (!colorValue || !valueAnimation.enable) {\n            return;\n        }\n        const offset = Utils_1.randomInRange(valueAnimation.offset);\n        const velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6;\n        if (!decrease || colorValue.status === Enums_1.AnimationStatus.increasing) {\n            colorValue.value += velocity;\n            if (decrease && colorValue.value > max) {\n                colorValue.status = Enums_1.AnimationStatus.decreasing;\n                colorValue.value -= colorValue.value % max;\n            }\n        }\n        else {\n            colorValue.value -= velocity;\n            if (colorValue.value < 0) {\n                colorValue.status = Enums_1.AnimationStatus.increasing;\n                colorValue.value += colorValue.value;\n            }\n        }\n        if (colorValue.value > max) {\n            colorValue.value %= max;\n        }\n    }\n    updateOutModes(delta) {\n        var _a, _b, _c, _d;\n        const outModes = this.particle.options.move.outModes;\n        this.updateOutMode(delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes.default, Enums_1.OutModeDirection.bottom);\n        this.updateOutMode(delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes.default, Enums_1.OutModeDirection.left);\n        this.updateOutMode(delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes.default, Enums_1.OutModeDirection.right);\n        this.updateOutMode(delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes.default, Enums_1.OutModeDirection.top);\n    }\n    updateOutMode(delta, outMode, direction) {\n        const container = this.container;\n        const particle = this.particle;\n        switch (outMode) {\n            case Enums_1.OutMode.bounce:\n            case Enums_1.OutMode.bounceVertical:\n            case Enums_1.OutMode.bounceHorizontal:\n            case \"bounceVertical\":\n            case \"bounceHorizontal\":\n            case Enums_1.OutMode.split:\n                this.updateBounce(delta, direction, outMode);\n                break;\n            case Enums_1.OutMode.destroy:\n                if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    container.particles.remove(particle, undefined, true);\n                }\n                break;\n            case Enums_1.OutMode.out:\n                if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                    this.fixOutOfCanvasPosition(direction);\n                }\n                break;\n            case Enums_1.OutMode.none:\n                this.bounceNone(direction);\n                break;\n        }\n    }\n    fixOutOfCanvasPosition(direction) {\n        const container = this.container;\n        const particle = this.particle;\n        const wrap = particle.options.move.warp;\n        const canvasSize = container.canvas.size;\n        const newPos = {\n            bottom: canvasSize.height + particle.getRadius() - particle.offset.y,\n            left: -particle.getRadius() - particle.offset.x,\n            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n            top: -particle.getRadius() - particle.offset.y,\n        };\n        const sizeValue = particle.getRadius();\n        const nextBounds = Utils_1.calculateBounds(particle.position, sizeValue);\n        if (direction === Enums_1.OutModeDirection.right && nextBounds.left > canvasSize.width - particle.offset.x) {\n            particle.position.x = newPos.left;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        else if (direction === Enums_1.OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n            particle.position.x = newPos.right;\n            if (!wrap) {\n                particle.position.y = Math.random() * canvasSize.height;\n            }\n        }\n        if (direction === Enums_1.OutModeDirection.bottom && nextBounds.top > canvasSize.height - particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.top;\n        }\n        else if (direction === Enums_1.OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n            if (!wrap) {\n                particle.position.x = Math.random() * canvasSize.width;\n            }\n            particle.position.y = newPos.bottom;\n        }\n    }\n    updateBounce(delta, direction, outMode) {\n        const container = this.container;\n        const particle = this.particle;\n        let handled = false;\n        for (const [, plugin] of container.plugins) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = Utils_1.calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n    bounceNone(direction) {\n        const particle = this.particle;\n        if ((particle.options.move.distance.horizontal &&\n            (direction === Enums_1.OutModeDirection.left || direction === Enums_1.OutModeDirection.right)) ||\n            (particle.options.move.distance.vertical &&\n                (direction === Enums_1.OutModeDirection.top || direction === Enums_1.OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity;\n        const container = this.container;\n        if (!gravityOptions.enable) {\n            if (!Utils_1.isPointInside(particle.position, container.canvas.size, particle.getRadius(), direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > container.canvas.size.height &&\n                direction === Enums_1.OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < 0 && direction === Enums_1.OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\nexports.Updater = Updater;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}