{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nconst {\n  callbackify\n} = require('util');\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\nvar RequestManager = function RequestManager(provider, net) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider, net);\n  this.subscriptions = new Map();\n};\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n  WebsocketProvider: require('web3-providers-ws'),\n  HttpProvider: require('web3-providers-http'),\n  IpcProvider: require('web3-providers-ipc')\n};\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\nRequestManager.prototype.setProvider = function (provider, net) {\n  var _this = this;\n\n  // autodetect provider\n  if (provider && typeof provider === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.HttpProvider(provider);\n\n      // WS\n    } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n      provider = new this.providers.WebsocketProvider(provider);\n\n      // IPC\n    } else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n      provider = new this.providers.IpcProvider(provider, net);\n    } else if (provider) {\n      throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n    }\n  }\n\n  // reset the old one before changing, if still connected\n  if (this.provider && this.provider.connected) this.clearSubscriptions();\n  this.provider = provider || null;\n\n  // listen to incoming notifications\n  if (this.provider && this.provider.on) {\n    this.provider.on('data', function data(result, deprecatedResult) {\n      result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n\n      // check for result.method, to prevent old providers errors to pass as result\n      if (result.method && _this.subscriptions.has(result.params.subscription)) {\n        _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n      }\n    });\n\n    // resubscribe if the provider has reconnected\n    this.provider.on('connect', function connect() {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.subscription.resubscribe();\n      });\n    });\n\n    // notify all subscriptions about the error condition\n    this.provider.on('error', function error(error) {\n      _this.subscriptions.forEach(function (subscription) {\n        subscription.callback(error);\n      });\n    });\n\n    // notify all subscriptions about bad close conditions\n    this.provider.on('close', function close(event) {\n      if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)) {\n        _this.subscriptions.forEach(function (subscription) {\n          subscription.callback(errors.ConnectionCloseError(event));\n          _this.subscriptions.delete(subscription.subscription.id);\n        });\n        if (_this.provider && _this.provider.emit) {\n          _this.provider.emit('error', errors.ConnectionCloseError(event));\n        }\n      }\n      if (_this.provider && _this.provider.emit) {\n        _this.provider.emit('end', event);\n      }\n    });\n\n    // TODO add end, timeout??\n  }\n};\n\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  const payload = Jsonrpc.toPayload(data.method, data.params);\n  const onJsonrpcResult = function (err, result) {\n    if (result && result.id && payload.id !== result.id) {\n      return callback(new Error(\"Wrong response id \".concat(result.id, \" (expected: \").concat(payload.id, \") in \").concat(JSON.stringify(payload))));\n    }\n    if (err) {\n      return callback(err);\n    }\n    if (result && result.error) {\n      return callback(errors.ErrorResponse(result));\n    }\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n    callback(null, result.result);\n  };\n  if (this.provider.request) {\n    callbackify(this.provider.request.bind(this.provider))(payload, callback);\n  } else if (this.provider.sendAsync) {\n    this.provider.sendAsync(payload, onJsonrpcResult);\n  } else if (this.provider.send) {\n    this.provider.send(payload, onJsonrpcResult);\n  } else {\n    throw new Error('Provider does not have a request or send method to use.');\n  }\n};\n\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n    if (!_.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n    callback(null, results);\n  });\n};\n\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n  if (this.provider.on) {\n    this.subscriptions.set(subscription.id, {\n      callback: callback,\n      subscription: subscription\n    });\n  } else {\n    throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n  }\n};\n\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  if (this.subscriptions.has(id)) {\n    var type = this.subscriptions.get(id).subscription.options.type;\n\n    // remove subscription first to avoid reentry\n    this.subscriptions.delete(id);\n\n    // then, try to actually unsubscribe\n    this.send({\n      method: type + '_unsubscribe',\n      params: [id]\n    }, callback);\n    return;\n  }\n  if (typeof callback === 'function') {\n    // call the callback if the subscription was already removed\n    callback(null);\n  }\n};\n\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  var _this = this;\n\n  // uninstall all subscriptions\n  if (this.subscriptions.size > 0) {\n    this.subscriptions.forEach(function (value, id) {\n      if (!keepIsSyncing || value.name !== 'syncing') _this.removeSubscription(id);\n    });\n  }\n\n  //  reset notification callbacks etc.\n  if (this.provider.reset) this.provider.reset();\n};\n\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n  return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isIpcCloseError = function (event) {\n  return typeof event === 'boolean' && event;\n};\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":{"version":3,"names":["callbackify","require","_","errors","Jsonrpc","BatchManager","givenProvider","RequestManager","provider","net","providers","setProvider","subscriptions","Map","WebsocketProvider","HttpProvider","IpcProvider","prototype","_this","test","connect","Error","connected","clearSubscriptions","on","data","result","deprecatedResult","method","has","params","subscription","get","callback","forEach","resubscribe","error","close","event","_isCleanCloseEvent","_isIpcCloseError","ConnectionCloseError","delete","id","emit","send","InvalidProvider","payload","toPayload","onJsonrpcResult","err","concat","JSON","stringify","ErrorResponse","isValidResponse","InvalidResponse","request","bind","sendAsync","sendBatch","toBatchPayload","results","isArray","addSubscription","set","constructor","name","removeSubscription","type","options","keepIsSyncing","size","value","reset","includes","code","wasClean","module","exports","Manager"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/web3-core-requestmanager/src/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nconst { callbackify } = require('util');\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n *\n * @param {string|Object}provider\n * @param {Net.Socket} net\n *\n * @constructor\n */\nvar RequestManager = function RequestManager(provider, net) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n\n    this.setProvider(provider, net);\n    this.subscriptions = new Map();\n};\n\n\nRequestManager.givenProvider = givenProvider;\n\nRequestManager.providers = {\n    WebsocketProvider: require('web3-providers-ws'),\n    HttpProvider: require('web3-providers-http'),\n    IpcProvider: require('web3-providers-ipc')\n};\n\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n *\n * @param {Object} provider\n * @param {net.Socket} net\n *\n * @returns void\n */\nRequestManager.prototype.setProvider = function (provider, net) {\n    var _this = this;\n\n    // autodetect provider\n    if (provider && typeof provider === 'string' && this.providers) {\n\n        // HTTP\n        if (/^http(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.HttpProvider(provider);\n\n            // WS\n        } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n            provider = new this.providers.WebsocketProvider(provider);\n\n            // IPC\n        } else if (provider && typeof net === 'object' && typeof net.connect === 'function') {\n            provider = new this.providers.IpcProvider(provider, net);\n\n        } else if (provider) {\n            throw new Error('Can\\'t autodetect provider for \"' + provider + '\"');\n        }\n    }\n\n\n    // reset the old one before changing, if still connected\n    if(this.provider && this.provider.connected)\n        this.clearSubscriptions();\n\n    this.provider = provider || null;\n\n    // listen to incoming notifications\n    if (this.provider && this.provider.on) {\n        this.provider.on('data', function data(result, deprecatedResult) {\n            result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n\n            // check for result.method, to prevent old providers errors to pass as result\n            if (result.method && _this.subscriptions.has(result.params.subscription)) {\n                _this.subscriptions.get(result.params.subscription).callback(null, result.params.result);\n            }\n        });\n\n        // resubscribe if the provider has reconnected\n        this.provider.on('connect', function connect() {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.subscription.resubscribe();\n            });\n        });\n\n        // notify all subscriptions about the error condition\n        this.provider.on('error', function error(error) {\n            _this.subscriptions.forEach(function (subscription) {\n                subscription.callback(error);\n            });\n        });\n\n        // notify all subscriptions about bad close conditions\n        this.provider.on('close', function close(event) {\n            if (!_this._isCleanCloseEvent(event) || _this._isIpcCloseError(event)){\n                _this.subscriptions.forEach(function (subscription) {\n                    subscription.callback(errors.ConnectionCloseError(event));\n                    _this.subscriptions.delete(subscription.subscription.id);\n                });\n\n                if(_this.provider && _this.provider.emit){\n                    _this.provider.emit('error', errors.ConnectionCloseError(event));\n                }\n            }\n            if(_this.provider && _this.provider.emit){\n                _this.provider.emit('end', event);\n            }\n        });\n\n        // TODO add end, timeout??\n    }\n};\n\n/**\n * Asynchronously send request to provider.\n * Prefers to use the `request` method available on the provider as specified in [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193).\n * If `request` is not available, falls back to `sendAsync` and `send` respectively.\n * @method send\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n    callback = callback || function () {};\n\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    const payload = Jsonrpc.toPayload(data.method, data.params);\n\n    const onJsonrpcResult = function (err, result) {\n        if(result && result.id && payload.id !== result.id) {\n            return callback(new Error(`Wrong response id ${result.id} (expected: ${payload.id}) in ${JSON.stringify(payload)}`));\n        }\n\n        if (err) {\n            return callback(err);\n        }\n\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    };\n\n    if (this.provider.request) {\n        callbackify(this.provider.request.bind(this.provider))(payload, callback);\n    } else if (this.provider.sendAsync) {\n        this.provider.sendAsync(payload, onJsonrpcResult);\n    } else if (this.provider.send) {\n        this.provider.send(payload, onJsonrpcResult);\n    } else {\n        throw new Error('Provider does not have a request or send method to use.');\n    }\n};\n\n/**\n * Asynchronously send batch request.\n * Only works if provider supports batch methods through `sendAsync` or `send`.\n * @method sendBatch\n * @param {Array} data - array of payload objects\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!_.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(null, results);\n    });\n};\n\n\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {Subscription} subscription         the subscription\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (subscription, callback) {\n    if (this.provider.on) {\n        this.subscriptions.set(\n            subscription.id,\n            {\n                callback: callback,\n                subscription: subscription\n            }\n        );\n    } else {\n        throw new Error('The provider doesn\\'t support subscriptions: '+ this.provider.constructor.name);\n    }\n};\n\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n    if (this.subscriptions.has(id)) {\n        var type = this.subscriptions.get(id).subscription.options.type;\n\n        // remove subscription first to avoid reentry\n        this.subscriptions.delete(id);\n\n        // then, try to actually unsubscribe\n        this.send({\n            method: type + '_unsubscribe',\n            params: [id]\n        }, callback);\n\n        return;\n    }\n\n    if (typeof callback === 'function') {\n        // call the callback if the subscription was already removed\n        callback(null);\n    }\n};\n\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n    var _this = this;\n\n    // uninstall all subscriptions\n    if (this.subscriptions.size > 0) {\n        this.subscriptions.forEach(function (value, id) {\n            if (!keepIsSyncing || value.name !== 'syncing')\n                _this.removeSubscription(id);\n        });\n    }\n\n    //  reset notification callbacks etc.\n    if(this.provider.reset)\n        this.provider.reset();\n};\n\n/**\n * Evaluates WS close event\n *\n * @method _isCleanClose\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isCleanCloseEvent = function (event) {\n    return typeof event === 'object' && ([1000].includes(event.code) || event.wasClean === true);\n};\n\n/**\n * Detects Ipc close error. The node.net module emits ('close', isException)\n *\n * @method _isIpcCloseError\n *\n * @param {CloseEvent | boolean} event WS close event or exception flag\n *\n * @returns {boolean}\n */\nRequestManager.prototype._isIpcCloseError = function (event) {\n    return typeof event === 'boolean' && event;\n};\n\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAGZ,MAAM;EAAEA;AAAY,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACvC,IAAIC,CAAC,GAAGD,OAAO,CAAC,YAAY,CAAC;AAC7B,IAAIE,MAAM,GAAGF,OAAO,CAAC,mBAAmB,CAAC,CAACE,MAAM;AAChD,IAAIC,OAAO,GAAGH,OAAO,CAAC,cAAc,CAAC;AACrC,IAAII,YAAY,GAAGJ,OAAO,CAAC,YAAY,CAAC;AACxC,IAAIK,aAAa,GAAGL,OAAO,CAAC,oBAAoB,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIM,cAAc,GAAG,SAASA,cAAcA,CAACC,QAAQ,EAAEC,GAAG,EAAE;EACxD,IAAI,CAACD,QAAQ,GAAG,IAAI;EACpB,IAAI,CAACE,SAAS,GAAGH,cAAc,CAACG,SAAS;EAEzC,IAAI,CAACC,WAAW,CAACH,QAAQ,EAAEC,GAAG,CAAC;EAC/B,IAAI,CAACG,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;AAClC,CAAC;AAGDN,cAAc,CAACD,aAAa,GAAGA,aAAa;AAE5CC,cAAc,CAACG,SAAS,GAAG;EACvBI,iBAAiB,EAAEb,OAAO,CAAC,mBAAmB,CAAC;EAC/Cc,YAAY,EAAEd,OAAO,CAAC,qBAAqB,CAAC;EAC5Ce,WAAW,EAAEf,OAAO,CAAC,oBAAoB;AAC7C,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAM,cAAc,CAACU,SAAS,CAACN,WAAW,GAAG,UAAUH,QAAQ,EAAEC,GAAG,EAAE;EAC5D,IAAIS,KAAK,GAAG,IAAI;;EAEhB;EACA,IAAIV,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAACE,SAAS,EAAE;IAE5D;IACA,IAAI,iBAAiB,CAACS,IAAI,CAACX,QAAQ,CAAC,EAAE;MAClCA,QAAQ,GAAG,IAAI,IAAI,CAACE,SAAS,CAACK,YAAY,CAACP,QAAQ,CAAC;;MAEpD;IACJ,CAAC,MAAM,IAAI,eAAe,CAACW,IAAI,CAACX,QAAQ,CAAC,EAAE;MACvCA,QAAQ,GAAG,IAAI,IAAI,CAACE,SAAS,CAACI,iBAAiB,CAACN,QAAQ,CAAC;;MAEzD;IACJ,CAAC,MAAM,IAAIA,QAAQ,IAAI,OAAOC,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,CAACW,OAAO,KAAK,UAAU,EAAE;MACjFZ,QAAQ,GAAG,IAAI,IAAI,CAACE,SAAS,CAACM,WAAW,CAACR,QAAQ,EAAEC,GAAG,CAAC;IAE5D,CAAC,MAAM,IAAID,QAAQ,EAAE;MACjB,MAAM,IAAIa,KAAK,CAAC,kCAAkC,GAAGb,QAAQ,GAAG,GAAG,CAAC;IACxE;EACJ;;EAGA;EACA,IAAG,IAAI,CAACA,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACc,SAAS,EACvC,IAAI,CAACC,kBAAkB,CAAC,CAAC;EAE7B,IAAI,CAACf,QAAQ,GAAGA,QAAQ,IAAI,IAAI;;EAEhC;EACA,IAAI,IAAI,CAACA,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACgB,EAAE,EAAE;IACnC,IAAI,CAAChB,QAAQ,CAACgB,EAAE,CAAC,MAAM,EAAE,SAASC,IAAIA,CAACC,MAAM,EAAEC,gBAAgB,EAAE;MAC7DD,MAAM,GAAGA,MAAM,IAAIC,gBAAgB,CAAC,CAAC;;MAErC;MACA,IAAID,MAAM,CAACE,MAAM,IAAIV,KAAK,CAACN,aAAa,CAACiB,GAAG,CAACH,MAAM,CAACI,MAAM,CAACC,YAAY,CAAC,EAAE;QACtEb,KAAK,CAACN,aAAa,CAACoB,GAAG,CAACN,MAAM,CAACI,MAAM,CAACC,YAAY,CAAC,CAACE,QAAQ,CAAC,IAAI,EAAEP,MAAM,CAACI,MAAM,CAACJ,MAAM,CAAC;MAC5F;IACJ,CAAC,CAAC;;IAEF;IACA,IAAI,CAAClB,QAAQ,CAACgB,EAAE,CAAC,SAAS,EAAE,SAASJ,OAAOA,CAAA,EAAG;MAC3CF,KAAK,CAACN,aAAa,CAACsB,OAAO,CAAC,UAAUH,YAAY,EAAE;QAChDA,YAAY,CAACA,YAAY,CAACI,WAAW,CAAC,CAAC;MAC3C,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC3B,QAAQ,CAACgB,EAAE,CAAC,OAAO,EAAE,SAASY,KAAKA,CAACA,KAAK,EAAE;MAC5ClB,KAAK,CAACN,aAAa,CAACsB,OAAO,CAAC,UAAUH,YAAY,EAAE;QAChDA,YAAY,CAACE,QAAQ,CAACG,KAAK,CAAC;MAChC,CAAC,CAAC;IACN,CAAC,CAAC;;IAEF;IACA,IAAI,CAAC5B,QAAQ,CAACgB,EAAE,CAAC,OAAO,EAAE,SAASa,KAAKA,CAACC,KAAK,EAAE;MAC5C,IAAI,CAACpB,KAAK,CAACqB,kBAAkB,CAACD,KAAK,CAAC,IAAIpB,KAAK,CAACsB,gBAAgB,CAACF,KAAK,CAAC,EAAC;QAClEpB,KAAK,CAACN,aAAa,CAACsB,OAAO,CAAC,UAAUH,YAAY,EAAE;UAChDA,YAAY,CAACE,QAAQ,CAAC9B,MAAM,CAACsC,oBAAoB,CAACH,KAAK,CAAC,CAAC;UACzDpB,KAAK,CAACN,aAAa,CAAC8B,MAAM,CAACX,YAAY,CAACA,YAAY,CAACY,EAAE,CAAC;QAC5D,CAAC,CAAC;QAEF,IAAGzB,KAAK,CAACV,QAAQ,IAAIU,KAAK,CAACV,QAAQ,CAACoC,IAAI,EAAC;UACrC1B,KAAK,CAACV,QAAQ,CAACoC,IAAI,CAAC,OAAO,EAAEzC,MAAM,CAACsC,oBAAoB,CAACH,KAAK,CAAC,CAAC;QACpE;MACJ;MACA,IAAGpB,KAAK,CAACV,QAAQ,IAAIU,KAAK,CAACV,QAAQ,CAACoC,IAAI,EAAC;QACrC1B,KAAK,CAACV,QAAQ,CAACoC,IAAI,CAAC,KAAK,EAAEN,KAAK,CAAC;MACrC;IACJ,CAAC,CAAC;;IAEF;EACJ;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/B,cAAc,CAACU,SAAS,CAAC4B,IAAI,GAAG,UAAUpB,IAAI,EAAEQ,QAAQ,EAAE;EACtDA,QAAQ,GAAGA,QAAQ,IAAI,YAAY,CAAC,CAAC;EAErC,IAAI,CAAC,IAAI,CAACzB,QAAQ,EAAE;IAChB,OAAOyB,QAAQ,CAAC9B,MAAM,CAAC2C,eAAe,CAAC,CAAC,CAAC;EAC7C;EAEA,MAAMC,OAAO,GAAG3C,OAAO,CAAC4C,SAAS,CAACvB,IAAI,CAACG,MAAM,EAAEH,IAAI,CAACK,MAAM,CAAC;EAE3D,MAAMmB,eAAe,GAAG,SAAAA,CAAUC,GAAG,EAAExB,MAAM,EAAE;IAC3C,IAAGA,MAAM,IAAIA,MAAM,CAACiB,EAAE,IAAII,OAAO,CAACJ,EAAE,KAAKjB,MAAM,CAACiB,EAAE,EAAE;MAChD,OAAOV,QAAQ,CAAC,IAAIZ,KAAK,sBAAA8B,MAAA,CAAsBzB,MAAM,CAACiB,EAAE,kBAAAQ,MAAA,CAAeJ,OAAO,CAACJ,EAAE,WAAAQ,MAAA,CAAQC,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC,CAAE,CAAC,CAAC;IACxH;IAEA,IAAIG,GAAG,EAAE;MACL,OAAOjB,QAAQ,CAACiB,GAAG,CAAC;IACxB;IAEA,IAAIxB,MAAM,IAAIA,MAAM,CAACU,KAAK,EAAE;MACxB,OAAOH,QAAQ,CAAC9B,MAAM,CAACmD,aAAa,CAAC5B,MAAM,CAAC,CAAC;IACjD;IAEA,IAAI,CAACtB,OAAO,CAACmD,eAAe,CAAC7B,MAAM,CAAC,EAAE;MAClC,OAAOO,QAAQ,CAAC9B,MAAM,CAACqD,eAAe,CAAC9B,MAAM,CAAC,CAAC;IACnD;IAEAO,QAAQ,CAAC,IAAI,EAAEP,MAAM,CAACA,MAAM,CAAC;EACjC,CAAC;EAED,IAAI,IAAI,CAAClB,QAAQ,CAACiD,OAAO,EAAE;IACvBzD,WAAW,CAAC,IAAI,CAACQ,QAAQ,CAACiD,OAAO,CAACC,IAAI,CAAC,IAAI,CAAClD,QAAQ,CAAC,CAAC,CAACuC,OAAO,EAAEd,QAAQ,CAAC;EAC7E,CAAC,MAAM,IAAI,IAAI,CAACzB,QAAQ,CAACmD,SAAS,EAAE;IAChC,IAAI,CAACnD,QAAQ,CAACmD,SAAS,CAACZ,OAAO,EAAEE,eAAe,CAAC;EACrD,CAAC,MAAM,IAAI,IAAI,CAACzC,QAAQ,CAACqC,IAAI,EAAE;IAC3B,IAAI,CAACrC,QAAQ,CAACqC,IAAI,CAACE,OAAO,EAAEE,eAAe,CAAC;EAChD,CAAC,MAAM;IACH,MAAM,IAAI5B,KAAK,CAAC,yDAAyD,CAAC;EAC9E;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACAd,cAAc,CAACU,SAAS,CAAC2C,SAAS,GAAG,UAAUnC,IAAI,EAAEQ,QAAQ,EAAE;EAC3D,IAAI,CAAC,IAAI,CAACzB,QAAQ,EAAE;IAChB,OAAOyB,QAAQ,CAAC9B,MAAM,CAAC2C,eAAe,CAAC,CAAC,CAAC;EAC7C;EAEA,IAAIC,OAAO,GAAG3C,OAAO,CAACyD,cAAc,CAACpC,IAAI,CAAC;EAC1C,IAAI,CAACjB,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACmD,SAAS,GAAG,WAAW,GAAG,MAAM,CAAC,CAACZ,OAAO,EAAE,UAAUG,GAAG,EAAEY,OAAO,EAAE;IAC3F,IAAIZ,GAAG,EAAE;MACL,OAAOjB,QAAQ,CAACiB,GAAG,CAAC;IACxB;IAEA,IAAI,CAAChD,CAAC,CAAC6D,OAAO,CAACD,OAAO,CAAC,EAAE;MACrB,OAAO7B,QAAQ,CAAC9B,MAAM,CAACqD,eAAe,CAACM,OAAO,CAAC,CAAC;IACpD;IAEA7B,QAAQ,CAAC,IAAI,EAAE6B,OAAO,CAAC;EAC3B,CAAC,CAAC;AACN,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvD,cAAc,CAACU,SAAS,CAAC+C,eAAe,GAAG,UAAUjC,YAAY,EAAEE,QAAQ,EAAE;EACzE,IAAI,IAAI,CAACzB,QAAQ,CAACgB,EAAE,EAAE;IAClB,IAAI,CAACZ,aAAa,CAACqD,GAAG,CAClBlC,YAAY,CAACY,EAAE,EACf;MACIV,QAAQ,EAAEA,QAAQ;MAClBF,YAAY,EAAEA;IAClB,CACJ,CAAC;EACL,CAAC,MAAM;IACH,MAAM,IAAIV,KAAK,CAAC,+CAA+C,GAAE,IAAI,CAACb,QAAQ,CAAC0D,WAAW,CAACC,IAAI,CAAC;EACpG;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA5D,cAAc,CAACU,SAAS,CAACmD,kBAAkB,GAAG,UAAUzB,EAAE,EAAEV,QAAQ,EAAE;EAClE,IAAI,IAAI,CAACrB,aAAa,CAACiB,GAAG,CAACc,EAAE,CAAC,EAAE;IAC5B,IAAI0B,IAAI,GAAG,IAAI,CAACzD,aAAa,CAACoB,GAAG,CAACW,EAAE,CAAC,CAACZ,YAAY,CAACuC,OAAO,CAACD,IAAI;;IAE/D;IACA,IAAI,CAACzD,aAAa,CAAC8B,MAAM,CAACC,EAAE,CAAC;;IAE7B;IACA,IAAI,CAACE,IAAI,CAAC;MACNjB,MAAM,EAAEyC,IAAI,GAAG,cAAc;MAC7BvC,MAAM,EAAE,CAACa,EAAE;IACf,CAAC,EAAEV,QAAQ,CAAC;IAEZ;EACJ;EAEA,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;IAChC;IACAA,QAAQ,CAAC,IAAI,CAAC;EAClB;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA1B,cAAc,CAACU,SAAS,CAACM,kBAAkB,GAAG,UAAUgD,aAAa,EAAE;EACnE,IAAIrD,KAAK,GAAG,IAAI;;EAEhB;EACA,IAAI,IAAI,CAACN,aAAa,CAAC4D,IAAI,GAAG,CAAC,EAAE;IAC7B,IAAI,CAAC5D,aAAa,CAACsB,OAAO,CAAC,UAAUuC,KAAK,EAAE9B,EAAE,EAAE;MAC5C,IAAI,CAAC4B,aAAa,IAAIE,KAAK,CAACN,IAAI,KAAK,SAAS,EAC1CjD,KAAK,CAACkD,kBAAkB,CAACzB,EAAE,CAAC;IACpC,CAAC,CAAC;EACN;;EAEA;EACA,IAAG,IAAI,CAACnC,QAAQ,CAACkE,KAAK,EAClB,IAAI,CAAClE,QAAQ,CAACkE,KAAK,CAAC,CAAC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnE,cAAc,CAACU,SAAS,CAACsB,kBAAkB,GAAG,UAAUD,KAAK,EAAE;EAC3D,OAAO,OAAOA,KAAK,KAAK,QAAQ,KAAK,CAAC,IAAI,CAAC,CAACqC,QAAQ,CAACrC,KAAK,CAACsC,IAAI,CAAC,IAAItC,KAAK,CAACuC,QAAQ,KAAK,IAAI,CAAC;AAChG,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtE,cAAc,CAACU,SAAS,CAACuB,gBAAgB,GAAG,UAAUF,KAAK,EAAE;EACzD,OAAO,OAAOA,KAAK,KAAK,SAAS,IAAIA,KAAK;AAC9C,CAAC;AAEDwC,MAAM,CAACC,OAAO,GAAG;EACbC,OAAO,EAAEzE,cAAc;EACvBF,YAAY,EAAEA;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}