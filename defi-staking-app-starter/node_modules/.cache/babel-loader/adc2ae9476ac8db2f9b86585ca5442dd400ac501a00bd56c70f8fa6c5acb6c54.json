{"ast":null,"code":"\"use strict\";\n\nimport { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nconst Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nconst Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nexport function isValidName(name) {\n  try {\n    const comps = name.split(\".\");\n    for (let i = 0; i < comps.length; i++) {\n      if (nameprep(comps[i]).length === 0) {\n        throw new Error(\"empty\");\n      }\n    }\n    return true;\n  } catch (error) {}\n  return false;\n}\nexport function namehash(name) {\n  /* istanbul ignore if */\n  if (typeof name !== \"string\") {\n    logger.throwArgumentError(\"invalid address - \" + String(name), \"name\", name);\n  }\n  let result = Zeros;\n  while (name.length) {\n    const partition = name.match(Partition);\n    const label = toUtf8Bytes(nameprep(partition[3]));\n    result = keccak256(concat([result, keccak256(label)]));\n    name = partition[2] || \"\";\n  }\n  return hexlify(result);\n}\nexport function id(text) {\n  return keccak256(toUtf8Bytes(text));\n}\nexport const messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\nexport function hashMessage(message) {\n  if (typeof message === \"string\") {\n    message = toUtf8Bytes(message);\n  }\n  return keccak256(concat([toUtf8Bytes(messagePrefix), toUtf8Bytes(String(message.length)), message]));\n}","map":{"version":3,"names":["concat","hexlify","nameprep","toUtf8Bytes","keccak256","Logger","version","logger","Zeros","Uint8Array","Partition","RegExp","isValidName","name","comps","split","i","length","Error","error","namehash","throwArgumentError","String","result","partition","match","label","id","text","messagePrefix","hashMessage","message"],"sources":["../src.ts/index.ts"],"sourcesContent":[null],"mappings":"AAAA,YAAY;;AAEZ,SAAgBA,MAAM,EAAEC,OAAO,QAAQ,sBAAsB;AAC7D,SAASC,QAAQ,EAAEC,WAAW,QAAQ,wBAAwB;AAC9D,SAASC,SAAS,QAAQ,0BAA0B;AAEpD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC;AAEA,MAAME,KAAK,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9H,MAAMC,SAAS,GAAG,IAAIC,MAAM,CAAC,qBAAqB,CAAC;AAEnD,OAAM,SAAUC,WAAWA,CAACC,IAAY;EACpC,IAAI;IACA,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC;IAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACnC,IAAId,QAAQ,CAACY,KAAK,CAACE,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;QACjC,MAAM,IAAIC,KAAK,CAAC,OAAO,CAAC;;;IAGhC,OAAO,IAAI;GACd,CAAC,OAAOC,KAAK,EAAE;EAChB,OAAO,KAAK;AAChB;AAEA,OAAM,SAAUC,QAAQA,CAACP,IAAY;EACjC;EACA,IAAI,OAAOA,IAAK,KAAK,QAAQ,EAAE;IAC3BN,MAAM,CAACc,kBAAkB,CAAC,oBAAoB,GAAGC,MAAM,CAACT,IAAI,CAAC,EAAE,MAAM,EAAEA,IAAI,CAAC;;EAGhF,IAAIU,MAAM,GAAwBf,KAAK;EACvC,OAAOK,IAAI,CAACI,MAAM,EAAE;IAChB,MAAMO,SAAS,GAAGX,IAAI,CAACY,KAAK,CAACf,SAAS,CAAC;IACvC,MAAMgB,KAAK,GAAGvB,WAAW,CAACD,QAAQ,CAACsB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACjDD,MAAM,GAAGnB,SAAS,CAACJ,MAAM,CAAC,CAACuB,MAAM,EAAEnB,SAAS,CAACsB,KAAK,CAAC,CAAC,CAAC,CAAC;IAEtDb,IAAI,GAAGW,SAAS,CAAC,CAAC,CAAC,IAAI,EAAE;;EAG7B,OAAOvB,OAAO,CAACsB,MAAM,CAAC;AAC1B;AAGA,OAAM,SAAUI,EAAEA,CAACC,IAAY;EAC3B,OAAOxB,SAAS,CAACD,WAAW,CAACyB,IAAI,CAAC,CAAC;AACvC;AAEA,OAAO,MAAMC,aAAa,GAAG,gCAAgC;AAE7D,OAAM,SAAUC,WAAWA,CAACC,OAAuB;EAC/C,IAAI,OAAOA,OAAQ,KAAK,QAAQ,EAAE;IAAEA,OAAO,GAAG5B,WAAW,CAAC4B,OAAO,CAAC;;EAClE,OAAO3B,SAAS,CAACJ,MAAM,CAAC,CACpBG,WAAW,CAAC0B,aAAa,CAAC,EAC1B1B,WAAW,CAACmB,MAAM,CAACS,OAAO,CAACd,MAAM,CAAC,CAAC,EACnCc,OAAO,CACV,CAAC,CAAC;AACP"},"metadata":{},"sourceType":"module","externalDependencies":[]}