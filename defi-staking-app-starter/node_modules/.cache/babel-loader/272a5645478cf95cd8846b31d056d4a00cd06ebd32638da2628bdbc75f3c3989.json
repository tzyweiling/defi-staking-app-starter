{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nmodule.exports = function base64(alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1;\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1;\n  return {\n    encode(input) {\n      let output = '';\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64');\n      } else {\n        output = input.toString('base64');\n      }\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_');\n      }\n      const pad = output.indexOf('=');\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad);\n      }\n      return output;\n    },\n    decode(input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character');\n        }\n      }\n      return Buffer.from(input, 'base64');\n    }\n  };\n};","map":{"version":3,"names":["Buffer","require","module","exports","base64","alphabet","padding","indexOf","url","encode","input","output","from","toString","replace","pad","substring","decode","char","Error"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/multibase/src/base64.js"],"sourcesContent":["'use strict'\nconst { Buffer } = require('buffer')\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      for (const char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEpCC,MAAM,CAACC,OAAO,GAAG,SAASC,MAAMA,CAAEC,QAAQ,EAAE;EAC1C;EACA;EACA;EACA;EACA;EACA,MAAMC,OAAO,GAAGD,QAAQ,CAACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1C,MAAMC,GAAG,GAAGH,QAAQ,CAACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIF,QAAQ,CAACE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAEpE,OAAO;IACLE,MAAMA,CAAEC,KAAK,EAAE;MACb,IAAIC,MAAM,GAAG,EAAE;MAEf,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;QAC7BC,MAAM,GAAGX,MAAM,CAACY,IAAI,CAACF,KAAK,CAAC,CAACG,QAAQ,CAAC,QAAQ,CAAC;MAChD,CAAC,MAAM;QACLF,MAAM,GAAGD,KAAK,CAACG,QAAQ,CAAC,QAAQ,CAAC;MACnC;MAEA,IAAIL,GAAG,EAAE;QACPG,MAAM,GAAGA,MAAM,CAACG,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;MACzD;MAEA,MAAMC,GAAG,GAAGJ,MAAM,CAACJ,OAAO,CAAC,GAAG,CAAC;MAC/B,IAAIQ,GAAG,GAAG,CAAC,IAAI,CAACT,OAAO,EAAE;QACvBK,MAAM,GAAGA,MAAM,CAACK,SAAS,CAAC,CAAC,EAAED,GAAG,CAAC;MACnC;MAEA,OAAOJ,MAAM;IACf,CAAC;IACDM,MAAMA,CAAEP,KAAK,EAAE;MACb,KAAK,MAAMQ,IAAI,IAAIR,KAAK,EAAE;QACxB,IAAIL,QAAQ,CAACE,OAAO,CAACW,IAAI,CAAC,GAAG,CAAC,EAAE;UAC9B,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;QAC7C;MACF;MAEA,OAAOnB,MAAM,CAACY,IAAI,CAACF,KAAK,EAAE,QAAQ,CAAC;IACrC;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}