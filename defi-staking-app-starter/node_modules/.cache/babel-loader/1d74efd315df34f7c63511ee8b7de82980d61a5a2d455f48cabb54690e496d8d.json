{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./NavBar\";\nimport Web3 from \"web3/dist/web3.min.js\";\nclass App extends Component {\n  //called immediately before mounting  occurs\n  //component is considered unsafe by react, best practice using UNSAFE_\n  //make sure metamask is load\n  async UNSAFE_componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockChainData();\n  }\n\n  // function to load web3 (async function), connect the app to the blockchain\n  async loadWeb3() {\n    // if we detect ethereum in window\n    if (window.ethereum) {\n      // create a new instance of Web3 using the detected ethereum provider\n      //allows the app to interact with the Ethereum blockchain\n      window.web3 = new Web3(window.ethereum);\n      try {\n        // requests the user's permission to connect the app to their Ethereum accounts\n        // using the recommended eth_requestAccounts method\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n      } catch (error) {\n        // Handle error (user denied account access)\n        console.error(\"User denied account access:\", error);\n      }\n    } else if (window.web3) {\n      // if no ethereum provider but web3 is present, create a new Web3 instance using the current provider\n      window.web3 = new this.Web3(window.web3.currentProvider);\n    } else {\n      // if no ethereum provider or web3, show an alert indicating that no ethereum browser is detected\n      window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\n    }\n  }\n  async loadBlockChainData() {\n    const web3 = window.web3;\n    //get acc from blockchain data\n    const account = await web3.eth.getAccounts();\n    console.log(account);\n    //the account address in metamask will show in console\n  }\n\n  //props: special feature/parameter in react, allow us to passover properties fromone component to another\n  constructor(props) {\n    super(props);\n    //set our state\n    // we have lot of state, so create an object and put all state in the object\n    this.state = {\n      //setup state\n      account: \"0x0\",\n      //send state as props to navbar, want acc info to appear in navbar\n      //create a property called account in <Navbar>, then we hv applied state to account in navbar by passing it through props\n\n      //initialize state for all contract and the balance of all contract (deposit, withdraw, issue token)\n      //contarct is an object\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance\n    };\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navbar","Web3","App","UNSAFE_componentWillMount","loadWeb3","loadBlockChainData","window","ethereum","web3","request","method","error","console","currentProvider","alert","account","eth","getAccounts","log","constructor","props","state","tether","rwd","decentralBank","tetherBalance","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./NavBar\";\r\nimport Web3 from \"web3/dist/web3.min.js\";\r\n\r\nclass App extends Component {\r\n  //called immediately before mounting  occurs\r\n  //component is considered unsafe by react, best practice using UNSAFE_\r\n  //make sure metamask is load\r\n  async UNSAFE_componentWillMount() {\r\n    await this.loadWeb3();\r\n    await this.loadBlockChainData();\r\n  }\r\n\r\n  // function to load web3 (async function), connect the app to the blockchain\r\n  async loadWeb3() {\r\n    // if we detect ethereum in window\r\n    if (window.ethereum) {\r\n      // create a new instance of Web3 using the detected ethereum provider\r\n      //allows the app to interact with the Ethereum blockchain\r\n      window.web3 = new Web3(window.ethereum);\r\n      try {\r\n        // requests the user's permission to connect the app to their Ethereum accounts\r\n        // using the recommended eth_requestAccounts method\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      } catch (error) {\r\n        // Handle error (user denied account access)\r\n        console.error(\"User denied account access:\", error);\r\n      }\r\n    } else if (window.web3) {\r\n      // if no ethereum provider but web3 is present, create a new Web3 instance using the current provider\r\n      window.web3 = new this.Web3(window.web3.currentProvider);\r\n    } else {\r\n      // if no ethereum provider or web3, show an alert indicating that no ethereum browser is detected\r\n      window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\r\n    }\r\n  }\r\n\r\n  async loadBlockChainData() {\r\n    const web3 = window.web3;\r\n    //get acc from blockchain data\r\n    const account = await web3.eth.getAccounts();\r\n    console.log(account);\r\n    //the account address in metamask will show in console\r\n  }\r\n\r\n  //props: special feature/parameter in react, allow us to passover properties fromone component to another\r\n  constructor(props) {\r\n    super(props);\r\n    //set our state\r\n    // we have lot of state, so create an object and put all state in the object\r\n    this.state = {\r\n      //setup state\r\n      account: \"0x0\",\r\n      //send state as props to navbar, want acc info to appear in navbar\r\n      //create a property called account in <Navbar>, then we hv applied state to account in navbar by passing it through props\r\n\r\n      //initialize state for all contract and the balance of all contract (deposit, withdraw, issue token)\r\n      //contarct is an object\r\n      tether: {},\r\n      rwd: {},\r\n      decentralBank: {},\r\n      tetherBalance\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,WAAW;AAClB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,IAAI,MAAM,uBAAuB;AAExC,MAAMC,GAAG,SAASH,SAAS,CAAC;EAC1B;EACA;EACA;EACA,MAAMI,yBAAyBA,CAAA,EAAG;IAChC,MAAM,IAAI,CAACC,QAAQ,CAAC,CAAC;IACrB,MAAM,IAAI,CAACC,kBAAkB,CAAC,CAAC;EACjC;;EAEA;EACA,MAAMD,QAAQA,CAAA,EAAG;IACf;IACA,IAAIE,MAAM,CAACC,QAAQ,EAAE;MACnB;MACA;MACAD,MAAM,CAACE,IAAI,GAAG,IAAIP,IAAI,CAACK,MAAM,CAACC,QAAQ,CAAC;MACvC,IAAI;QACF;QACA;QACA,MAAMD,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;MAClE,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC,MAAM,IAAIL,MAAM,CAACE,IAAI,EAAE;MACtB;MACAF,MAAM,CAACE,IAAI,GAAG,IAAI,IAAI,CAACP,IAAI,CAACK,MAAM,CAACE,IAAI,CAACK,eAAe,CAAC;IAC1D,CAAC,MAAM;MACL;MACAP,MAAM,CAACQ,KAAK,CAAC,2DAA2D,CAAC;IAC3E;EACF;EAEA,MAAMT,kBAAkBA,CAAA,EAAG;IACzB,MAAMG,IAAI,GAAGF,MAAM,CAACE,IAAI;IACxB;IACA,MAAMO,OAAO,GAAG,MAAMP,IAAI,CAACQ,GAAG,CAACC,WAAW,CAAC,CAAC;IAC5CL,OAAO,CAACM,GAAG,CAACH,OAAO,CAAC;IACpB;EACF;;EAEA;EACAI,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ;IACA;IACA,IAAI,CAACC,KAAK,GAAG;MACX;MACAN,OAAO,EAAE,KAAK;MACd;MACA;;MAEA;MACA;MACAO,MAAM,EAAE,CAAC,CAAC;MACVC,GAAG,EAAE,CAAC,CAAC;MACPC,aAAa,EAAE,CAAC,CAAC;MACjBC;IACF,CAAC;EACH;EAEAC,MAAMA,CAAA,EAAG;IACP,oBACE5B,KAAA,CAAA6B,aAAA;MAAAC,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACEnC,KAAA,CAAA6B,aAAA,CAAC3B,MAAM;MAACe,OAAO,EAAE,IAAI,CAACM,KAAK,CAACN,OAAQ;MAAAa,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAE,CACnC,CAAC;EAEV;AACF;AAEA,eAAe/B,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}