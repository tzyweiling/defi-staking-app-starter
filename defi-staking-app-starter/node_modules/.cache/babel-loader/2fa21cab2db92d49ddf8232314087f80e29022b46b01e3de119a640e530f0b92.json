{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction applyDistance(particle) {\n  const initialPosition = particle.initialPosition;\n  const {\n    dx,\n    dy\n  } = Utils_1.getDistances(initialPosition, particle.position);\n  const dxFixed = Math.abs(dx),\n    dyFixed = Math.abs(dy);\n  const hDistance = particle.maxDistance.horizontal;\n  const vDistance = particle.maxDistance.vertical;\n  if (!hDistance && !vDistance) {\n    return;\n  }\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n      vel = particle.velocity;\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\nclass Mover {\n  constructor(container, particle) {\n    this.container = container;\n    this.particle = particle;\n  }\n  move(delta) {\n    const particle = this.particle;\n    particle.bubble.inRange = false;\n    particle.links = [];\n    for (const [, plugin] of this.container.plugins) {\n      if (particle.destroyed) {\n        break;\n      }\n      if (plugin.particleUpdate) {\n        plugin.particleUpdate(particle, delta);\n      }\n    }\n    if (particle.destroyed) {\n      return;\n    }\n    this.moveParticle(delta);\n    this.moveParallax();\n  }\n  moveParticle(delta) {\n    var _a, _b, _c;\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n    if (!particlesOptions.move.enable) {\n      return;\n    }\n    const container = this.container;\n    const slowFactor = this.getProximitySpeedFactor();\n    const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) * container.retina.reduceFactor;\n    const maxSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n    const moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n    const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n    this.applyPath(delta);\n    const gravityOptions = particlesOptions.move.gravity;\n    const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n    if (gravityOptions.enable) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n    if (moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n    particle.velocity.multTo(1 - particle.options.move.decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n    if (gravityOptions.enable && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed) && gravityOptions.maxSpeed > 0) {\n      velocity.y = gravityFactor * maxSpeed;\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n    const zIndexOptions = particle.options.zIndex,\n      zVelocityFactor = 1 - zIndexOptions.velocityRate * particle.zIndexFactor;\n    velocity.multTo(zVelocityFactor);\n    particle.position.addTo(velocity);\n    if (particlesOptions.move.vibrate) {\n      particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n      particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n    }\n    const initialPosition = particle.initialPosition;\n    const initialDistance = Utils_1.getDistance(initialPosition, particle.position);\n    if (particle.maxDistance) {\n      if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n        particle.misplaced = initialDistance > particle.maxDistance;\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n      } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n        particle.misplaced = false;\n      } else if (particle.misplaced) {\n        if (particle.position.x < initialPosition.x && particle.velocity.x < 0 || particle.position.x > initialPosition.x && particle.velocity.x > 0) {\n          particle.velocity.x *= -Math.random();\n        }\n        if (particle.position.y < initialPosition.y && particle.velocity.y < 0 || particle.position.y > initialPosition.y && particle.velocity.y > 0) {\n          particle.velocity.y *= -Math.random();\n        }\n      }\n    }\n    applyDistance(particle);\n  }\n  applyPath(delta) {\n    const particle = this.particle;\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n      return;\n    }\n    const container = this.container;\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n    let generator = container.pathGenerator;\n    if (pathOptions.generator) {\n      const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n      if (customGenerator) {\n        generator = customGenerator;\n      }\n    }\n    const path = generator.generate(particle);\n    particle.velocity.addTo(path);\n    if (pathOptions.clamp) {\n      particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n      particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n  }\n  moveParallax() {\n    const container = this.container;\n    const options = container.actualOptions;\n    if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n    const particle = this.particle;\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n    if (!mousePos) {\n      return;\n    }\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n  getProximitySpeedFactor() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n    if (!active) {\n      return 1;\n    }\n    const mousePos = this.container.interactivity.mouse.position;\n    if (!mousePos) {\n      return 1;\n    }\n    const particlePos = this.particle.getPosition();\n    const dist = Utils_1.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n    if (dist > radius) {\n      return 1;\n    }\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n}\nexports.Mover = Mover;","map":{"version":3,"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","applyDistance","particle","initialPosition","dx","dy","getDistances","position","dxFixed","Math","abs","dyFixed","hDistance","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","constructor","container","move","delta","bubble","inRange","links","plugin","plugins","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","_c","particlesOptions","options","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","getRangeValue","speed","retina","pixelRatio","reduceFactor","maxSize","getRangeMax","size","sizeFactor","getRadius","factor","moveDrift","drift","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","multTo","decay","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","velocityRate","zIndexFactor","addTo","vibrate","sin","cos","initialDistance","getDistance","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","clamp","actualOptions","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/tsparticles/Core/Particle/Mover.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Mover = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nfunction applyDistance(particle) {\n    const initialPosition = particle.initialPosition;\n    const { dx, dy } = Utils_1.getDistances(initialPosition, particle.position);\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\n    const hDistance = particle.maxDistance.horizontal;\n    const vDistance = particle.maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\n            vel.x *= -Math.random();\n        }\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\n            vel.y *= -Math.random();\n        }\n    }\n}\nclass Mover {\n    constructor(container, particle) {\n        this.container = container;\n        this.particle = particle;\n    }\n    move(delta) {\n        const particle = this.particle;\n        particle.bubble.inRange = false;\n        particle.links = [];\n        for (const [, plugin] of this.container.plugins) {\n            if (particle.destroyed) {\n                break;\n            }\n            if (plugin.particleUpdate) {\n                plugin.particleUpdate(particle, delta);\n            }\n        }\n        if (particle.destroyed) {\n            return;\n        }\n        this.moveParticle(delta);\n        this.moveParallax();\n    }\n    moveParticle(delta) {\n        var _a, _b, _c;\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        if (!particlesOptions.move.enable) {\n            return;\n        }\n        const container = this.container;\n        const slowFactor = this.getProximitySpeedFactor();\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) *\n            container.retina.reduceFactor;\n        const maxSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\n        const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n        this.applyPath(delta);\n        const gravityOptions = particlesOptions.move.gravity;\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n        if (gravityOptions.enable) {\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\n        }\n        if (moveSpeed) {\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\n        }\n        particle.velocity.multTo(1 - particle.options.move.decay);\n        const velocity = particle.velocity.mult(moveSpeed);\n        const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n        if (gravityOptions.enable &&\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) &&\n            gravityOptions.maxSpeed > 0) {\n            velocity.y = gravityFactor * maxSpeed;\n            if (moveSpeed) {\n                particle.velocity.y = velocity.y / moveSpeed;\n            }\n        }\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = 1 - zIndexOptions.velocityRate * particle.zIndexFactor;\n        velocity.multTo(zVelocityFactor);\n        particle.position.addTo(velocity);\n        if (particlesOptions.move.vibrate) {\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n        }\n        const initialPosition = particle.initialPosition;\n        const initialDistance = Utils_1.getDistance(initialPosition, particle.position);\n        if (particle.maxDistance) {\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n                particle.misplaced = initialDistance > particle.maxDistance;\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n            }\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\n                particle.misplaced = false;\n            }\n            else if (particle.misplaced) {\n                if ((particle.position.x < initialPosition.x && particle.velocity.x < 0) ||\n                    (particle.position.x > initialPosition.x && particle.velocity.x > 0)) {\n                    particle.velocity.x *= -Math.random();\n                }\n                if ((particle.position.y < initialPosition.y && particle.velocity.y < 0) ||\n                    (particle.position.y > initialPosition.y && particle.velocity.y > 0)) {\n                    particle.velocity.y *= -Math.random();\n                }\n            }\n        }\n        applyDistance(particle);\n    }\n    applyPath(delta) {\n        const particle = this.particle;\n        const particlesOptions = particle.options;\n        const pathOptions = particlesOptions.move.path;\n        const pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n            return;\n        }\n        const container = this.container;\n        if (particle.lastPathTime <= particle.pathDelay) {\n            particle.lastPathTime += delta.value;\n            return;\n        }\n        let generator = container.pathGenerator;\n        if (pathOptions.generator) {\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n            if (customGenerator) {\n                generator = customGenerator;\n            }\n        }\n        const path = generator.generate(particle);\n        particle.velocity.addTo(path);\n        if (pathOptions.clamp) {\n            particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n            particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n    }\n    moveParallax() {\n        const container = this.container;\n        const options = container.actualOptions;\n        if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n            return;\n        }\n        const particle = this.particle;\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasCenter = {\n            x: container.canvas.size.width / 2,\n            y: container.canvas.size.height / 2,\n        };\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n        const factor = particle.getRadius() / parallaxForce;\n        const tmp = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        };\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n    }\n    getProximitySpeedFactor() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n        if (!active) {\n            return 1;\n        }\n        const mousePos = this.container.interactivity.mouse.position;\n        if (!mousePos) {\n            return 1;\n        }\n        const particlePos = this.particle.getPosition();\n        const dist = Utils_1.getDistance(mousePos, particlePos);\n        const radius = container.retina.slowModeRadius;\n        if (dist > radius) {\n            return 1;\n        }\n        const proximityFactor = dist / radius || 0;\n        const slowFactor = options.interactivity.modes.slow.factor;\n        return proximityFactor / slowFactor;\n    }\n}\nexports.Mover = Mover;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}