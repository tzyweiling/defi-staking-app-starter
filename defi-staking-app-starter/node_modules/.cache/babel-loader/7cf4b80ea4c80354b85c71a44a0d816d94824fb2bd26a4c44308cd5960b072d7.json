{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\nvar _elementaryName = function (name) {\n  /*jshint maxcomplexity:false */\n\n  if (name.startsWith('int[')) {\n    return 'int256' + name.slice(3);\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return 'uint256' + name.slice(4);\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return 'fixed128x128' + name.slice(5);\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return 'ufixed128x128' + name.slice(6);\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n  return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n  var typesize = /^\\D+(\\d+).*$/.exec(type);\n  return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n  var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n  return arraySize ? parseInt(arraySize[1], 10) : null;\n};\nvar _parseNumber = function (arg) {\n  var type = typeof arg;\n  if (type === 'string') {\n    if (utils.isHexStrict(arg)) {\n      return new BN(arg.replace(/0x/i, ''), 16);\n    } else {\n      return new BN(arg, 10);\n    }\n  } else if (type === 'number') {\n    return new BN(arg);\n  } else if (utils.isBigNumber(arg)) {\n    return new BN(arg.toString(10));\n  } else if (utils.isBN(arg)) {\n    return arg;\n  } else {\n    throw new Error(arg + ' is not a number');\n  }\n};\nvar _solidityPack = function (type, value, arraySize) {\n  /*jshint maxcomplexity:false */\n\n  var size, num;\n  type = _elementaryName(type);\n  if (type === 'bytes') {\n    if (value.replace(/^0x/i, '').length % 2 !== 0) {\n      throw new Error('Invalid bytes characters ' + value.length);\n    }\n    return value;\n  } else if (type === 'string') {\n    return utils.utf8ToHex(value);\n  } else if (type === 'bool') {\n    return value ? '01' : '00';\n  } else if (type.startsWith('address')) {\n    if (arraySize) {\n      size = 64;\n    } else {\n      size = 40;\n    }\n    if (!utils.isAddress(value)) {\n      throw new Error(value + ' is not a valid address, or the checksum is invalid.');\n    }\n    return utils.leftPad(value.toLowerCase(), size);\n  }\n  size = _parseTypeN(type);\n  if (type.startsWith('bytes')) {\n    if (!size) {\n      throw new Error('bytes[] not yet supported in solidity');\n    }\n\n    // must be 32 byte slices when in an array\n    if (arraySize) {\n      size = 32;\n    }\n    if (size < 1 || size > 32 || size < value.replace(/^0x/i, '').length / 2) {\n      throw new Error('Invalid bytes' + size + ' for ' + value);\n    }\n    return utils.rightPad(value, size * 2);\n  } else if (type.startsWith('uint')) {\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error('Invalid uint' + size + ' size');\n    }\n    num = _parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n    }\n    if (num.lt(new BN(0))) {\n      throw new Error('Supplied uint ' + num.toString() + ' is negative');\n    }\n    return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n  } else if (type.startsWith('int')) {\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error('Invalid int' + size + ' size');\n    }\n    num = _parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n    }\n    if (num.lt(new BN(0))) {\n      return num.toTwos(size).toString('hex');\n    } else {\n      return size ? utils.leftPad(num.toString('hex'), size / 8 * 2) : num;\n    }\n  } else {\n    // FIXME: support all other types\n    throw new Error('Unsupported or invalid type: ' + type);\n  }\n};\nvar _processSoliditySha3Args = function (arg) {\n  /*jshint maxcomplexity:false */\n\n  if (_.isArray(arg)) {\n    throw new Error('Autodetection of array types is not supported.');\n  }\n  var type,\n    value = '';\n  var hexArg, arraySize;\n\n  // if type is given\n  if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n    type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n    value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n  } else {\n    type = utils.toHex(arg, true);\n    value = utils.toHex(arg);\n    if (!type.startsWith('int') && !type.startsWith('uint')) {\n      type = 'bytes';\n    }\n  }\n  if ((type.startsWith('int') || type.startsWith('uint')) && typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n    value = new BN(value);\n  }\n\n  // get the array size\n  if (_.isArray(value)) {\n    arraySize = _parseTypeNArray(type);\n    if (arraySize && value.length !== arraySize) {\n      throw new Error(type + ' is not matching the given array ' + JSON.stringify(value));\n    } else {\n      arraySize = value.length;\n    }\n  }\n  if (_.isArray(value)) {\n    hexArg = value.map(function (val) {\n      return _solidityPack(type, val, arraySize).toString('hex').replace('0x', '');\n    });\n    return hexArg.join('');\n  } else {\n    hexArg = _solidityPack(type, value, arraySize);\n    return hexArg.toString('hex').replace('0x', '');\n  }\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n  /*jshint maxcomplexity:false */\n\n  var args = Array.prototype.slice.call(arguments);\n  var hexArgs = _.map(args, _processSoliditySha3Args);\n\n  // console.log(args, hexArgs);\n  // console.log('0x'+ hexArgs.join(''));\n\n  return utils.sha3('0x' + hexArgs.join(''));\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`\n *\n * @method soliditySha3Raw\n * @return {Object} the sha3\n */\nvar soliditySha3Raw = function () {\n  return utils.sha3Raw('0x' + _.map(Array.prototype.slice.call(arguments), _processSoliditySha3Args).join(''));\n};\nmodule.exports = {\n  soliditySha3: soliditySha3,\n  soliditySha3Raw: soliditySha3Raw\n};","map":{"version":3,"names":["_","require","BN","utils","_elementaryName","name","startsWith","slice","_parseTypeN","type","typesize","exec","parseInt","_parseTypeNArray","arraySize","_parseNumber","arg","isHexStrict","replace","isBigNumber","toString","isBN","Error","_solidityPack","value","size","num","length","utf8ToHex","isAddress","leftPad","toLowerCase","rightPad","bitLength","lt","toTwos","_processSoliditySha3Args","isArray","hexArg","isObject","hasOwnProperty","t","v","toHex","test","JSON","stringify","map","val","join","soliditySha3","args","Array","prototype","call","arguments","hexArgs","sha3","soliditySha3Raw","sha3Raw","module","exports"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/web3-utils/src/soliditySha3.js"],"sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file soliditySha3.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\nvar _ = require('underscore');\nvar BN = require('bn.js');\nvar utils = require('./utils.js');\n\n\nvar _elementaryName = function (name) {\n    /*jshint maxcomplexity:false */\n\n    if (name.startsWith('int[')) {\n        return 'int256' + name.slice(3);\n    } else if (name === 'int') {\n        return 'int256';\n    } else if (name.startsWith('uint[')) {\n        return 'uint256' + name.slice(4);\n    } else if (name === 'uint') {\n        return 'uint256';\n    } else if (name.startsWith('fixed[')) {\n        return 'fixed128x128' + name.slice(5);\n    } else if (name === 'fixed') {\n        return 'fixed128x128';\n    } else if (name.startsWith('ufixed[')) {\n        return 'ufixed128x128' + name.slice(6);\n    } else if (name === 'ufixed') {\n        return 'ufixed128x128';\n    }\n    return name;\n};\n\n// Parse N from type<N>\nvar _parseTypeN = function (type) {\n    var typesize = /^\\D+(\\d+).*$/.exec(type);\n    return typesize ? parseInt(typesize[1], 10) : null;\n};\n\n// Parse N from type[<N>]\nvar _parseTypeNArray = function (type) {\n    var arraySize = /^\\D+\\d*\\[(\\d+)\\]$/.exec(type);\n    return arraySize ? parseInt(arraySize[1], 10) : null;\n};\n\nvar _parseNumber = function (arg) {\n    var type = typeof arg;\n    if (type === 'string') {\n        if (utils.isHexStrict(arg)) {\n            return new BN(arg.replace(/0x/i,''), 16);\n        } else {\n            return new BN(arg, 10);\n        }\n    } else if (type === 'number') {\n        return new BN(arg);\n    } else if (utils.isBigNumber(arg)) {\n        return new BN(arg.toString(10));\n    } else if (utils.isBN(arg)) {\n        return arg;\n    } else {\n        throw new Error(arg +' is not a number');\n    }\n};\n\nvar _solidityPack = function (type, value, arraySize) {\n    /*jshint maxcomplexity:false */\n\n    var size, num;\n    type = _elementaryName(type);\n\n\n    if (type === 'bytes') {\n\n        if (value.replace(/^0x/i,'').length % 2 !== 0) {\n            throw new Error('Invalid bytes characters '+ value.length);\n        }\n\n        return value;\n    } else if (type === 'string') {\n        return utils.utf8ToHex(value);\n    } else if (type === 'bool') {\n        return value ? '01' : '00';\n    } else if (type.startsWith('address')) {\n        if(arraySize) {\n            size = 64;\n        } else {\n            size = 40;\n        }\n\n        if(!utils.isAddress(value)) {\n            throw new Error(value +' is not a valid address, or the checksum is invalid.');\n        }\n\n        return utils.leftPad(value.toLowerCase(), size);\n    }\n\n    size = _parseTypeN(type);\n\n    if (type.startsWith('bytes')) {\n\n        if(!size) {\n            throw new Error('bytes[] not yet supported in solidity');\n        }\n\n        // must be 32 byte slices when in an array\n        if(arraySize) {\n            size = 32;\n        }\n\n        if (size < 1 || size > 32 || size < value.replace(/^0x/i,'').length / 2 ) {\n            throw new Error('Invalid bytes' + size +' for '+ value);\n        }\n\n        return utils.rightPad(value, size * 2);\n    } else if (type.startsWith('uint')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid uint'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            throw new Error('Supplied uint '+ num.toString() +' is negative');\n        }\n\n        return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n    } else if (type.startsWith('int')) {\n\n        if ((size % 8) || (size < 8) || (size > 256)) {\n            throw new Error('Invalid int'+size+' size');\n        }\n\n        num = _parseNumber(value);\n        if (num.bitLength() > size) {\n            throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n        }\n\n        if(num.lt(new BN(0))) {\n            return num.toTwos(size).toString('hex');\n        } else {\n            return size ? utils.leftPad(num.toString('hex'), size/8 * 2) : num;\n        }\n\n    } else {\n        // FIXME: support all other types\n        throw new Error('Unsupported or invalid type: ' + type);\n    }\n};\n\n\nvar _processSoliditySha3Args = function (arg) {\n    /*jshint maxcomplexity:false */\n\n    if(_.isArray(arg)) {\n        throw new Error('Autodetection of array types is not supported.');\n    }\n\n    var type, value = '';\n    var hexArg, arraySize;\n\n    // if type is given\n    if (_.isObject(arg) && (arg.hasOwnProperty('v') || arg.hasOwnProperty('t') || arg.hasOwnProperty('value') || arg.hasOwnProperty('type'))) {\n        type = arg.hasOwnProperty('t') ? arg.t : arg.type;\n        value = arg.hasOwnProperty('v') ? arg.v : arg.value;\n\n    // otherwise try to guess the type\n    } else {\n\n        type = utils.toHex(arg, true);\n        value = utils.toHex(arg);\n\n        if (!type.startsWith('int') && !type.startsWith('uint')) {\n            type = 'bytes';\n        }\n    }\n\n    if ((type.startsWith('int') || type.startsWith('uint')) &&  typeof value === 'string' && !/^(-)?0x/i.test(value)) {\n        value = new BN(value);\n    }\n\n    // get the array size\n    if(_.isArray(value)) {\n        arraySize = _parseTypeNArray(type);\n        if(arraySize && value.length !== arraySize) {\n            throw new Error(type +' is not matching the given array '+ JSON.stringify(value));\n        } else {\n            arraySize = value.length;\n        }\n    }\n\n\n    if (_.isArray(value)) {\n        hexArg = value.map(function (val) {\n            return _solidityPack(type, val, arraySize).toString('hex').replace('0x','');\n        });\n        return hexArg.join('');\n    } else {\n        hexArg = _solidityPack(type, value, arraySize);\n        return hexArg.toString('hex').replace('0x','');\n    }\n\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256\n *\n * @method soliditySha3\n * @return {Object} the sha3\n */\nvar soliditySha3 = function () {\n    /*jshint maxcomplexity:false */\n\n    var args = Array.prototype.slice.call(arguments);\n\n    var hexArgs = _.map(args, _processSoliditySha3Args);\n\n    // console.log(args, hexArgs);\n    // console.log('0x'+ hexArgs.join(''));\n\n    return utils.sha3('0x'+ hexArgs.join(''));\n};\n\n/**\n * Hashes solidity values to a sha3 hash using keccak 256 but does return the hash of value `null` instead of `null`\n *\n * @method soliditySha3Raw\n * @return {Object} the sha3\n */\nvar soliditySha3Raw = function () {\n    return utils.sha3Raw('0x'+ _.map(Array.prototype.slice.call(arguments), _processSoliditySha3Args).join(''));\n};\n\n\nmodule.exports = {\n    soliditySha3: soliditySha3,\n    soliditySha3Raw: soliditySha3Raw\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}