{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./NavBar\";\nimport Web3 from \"web3/dist/web3.min.js\";\nimport Tether from \"../truffle_abis/Tether.json\";\nimport RWD from \"../truffle_abis/RWDjson\";\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\nclass App extends Component {\n  //called immediately before mounting  occurs\n  //component is considered unsafe by react, best practice using UNSAFE_\n  //make sure metamask is load\n  async UNSAFE_componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockChainData();\n  }\n\n  // function to load web3 (async function), connect the app to the blockchain\n  async loadWeb3() {\n    // if we detect ethereum in window\n    if (window.ethereum) {\n      // create a new instance of Web3 using the detected ethereum provider\n      //allows the app to interact with the Ethereum blockchain\n      window.web3 = new Web3(window.ethereum);\n      try {\n        // requests the user's permission to connect the app to their Ethereum accounts\n        // using the recommended eth_requestAccounts method\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n      } catch (error) {\n        // Handle error (user denied account access)\n        console.error(\"User denied account access:\", error);\n      }\n    } else if (window.web3) {\n      // if no ethereum provider but web3 is present, create a new Web3 instance using the current provider\n      window.web3 = new this.Web3(window.web3.currentProvider);\n    } else {\n      // if no ethereum provider or web3, show an alert indicating that no ethereum browser is detected\n      window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\n    }\n  }\n  async loadBlockChainData() {\n    const web3 = window.web3;\n    //get acc from blockchain data\n    const account = await web3.eth.getAccounts();\n    //set the state here to update the account\n    //account[0], first acc address in the account variable\n    this.setState({\n      account: account[0]\n    });\n    //the account address in metamask will show in console\n    //console.log(account);\n\n    //loading from which network, ganache is one of the ethereum network (network id:5777)\n    //how do we set our network to 5777\n    //// Get the network ID using web3.eth.net.getId()\n    const networkID = await web3.eth.net.getId();\n    //the network id 5777 will show in console log\n    //console.log(networkID, \"Network ID\");\n    //output: 5777 'Network ID'\n\n    //load up tether contract\n    //tetherData is an attempt to access the deployment information for the current network using the networkID as the key\n    //tetherData should contain information about the Tether contract on the current network\n    const tetherData = Tether.networks[networkID];\n    //if the app find the tetherData loading\n    //Common falsy values include false, null, undefined, 0, NaN, and an empty string ('')\n    //Truthy values include non-empty strings, numbers other than 0, objects, arrays, and other non-falsy values\n    if (tetherData) {\n      //creates a contract instance named tether using the web3.eth.Contract constructor\n      //requires the contract's ABI (Tether.abi) and the contract address (tetherData.address).\n      //tether contract\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n      //setting the state to tether (object type)\n      this.setState({\n        tether\n      });\n\n      //balance of the state of account\n      //if grabbing through web3, require .methods, method have to run the call function\n      let tetherBalance = await tether.methods.balanceOf(this.state.account).call();\n      //setting the state to tetherBalance\n      this.setState({\n        tetherBalance: tetherBalance.toString()\n      });\n      //console.log({ balance: tetherBalance });\n      //output: {balance: '100000000000000000000'}\n    } else {\n      window.alert(\"Error! Tether contract not deployed - no detected network\");\n    }\n    const rwdData = RWD.networks[networkID];\n    if (rwdData) {\n      const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n      this.setState({\n        rwd\n      });\n      let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\n      this.setState({\n        Balance: rwdBalance.toString()\n      });\n    }\n  }\n\n  //props: special feature/parameter in react, allow us to passover properties fromone component to another\n  constructor(props) {\n    super(props);\n    //set our state\n    // we have lot of state, so create an object and put all state in the object\n    this.state = {\n      //setup state\n      account: \"0x0\",\n      //send state as props to navbar, want acc info to appear in navbar\n      //create a property called account in <Navbar>, then we hv applied state to account in navbar by passing it through props\n\n      //initialize state for all contract and the balance of all contract (deposit, withdraw, issue token)\n      //contarct is an object {}, initialize contarct as empty\n      //intialize other state (except loading) as number value\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: \"0\",\n      rwdBalance: \"0\",\n      stakingBalance: \"0\",\n      loading: true\n    };\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","App","UNSAFE_componentWillMount","loadWeb3","loadBlockChainData","window","ethereum","web3","request","method","error","console","currentProvider","alert","account","eth","getAccounts","setState","networkID","net","getId","tetherData","networks","tether","Contract","abi","address","tetherBalance","methods","balanceOf","state","call","toString","rwdData","rwd","rwdBalance","Balance","constructor","props","decentralBank","stakingBalance","loading","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./NavBar\";\r\nimport Web3 from \"web3/dist/web3.min.js\";\r\nimport Tether from \"../truffle_abis/Tether.json\";\r\nimport RWD from \"../truffle_abis/RWDjson\";\r\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\r\n\r\nclass App extends Component {\r\n  //called immediately before mounting  occurs\r\n  //component is considered unsafe by react, best practice using UNSAFE_\r\n  //make sure metamask is load\r\n  async UNSAFE_componentWillMount() {\r\n    await this.loadWeb3();\r\n    await this.loadBlockChainData();\r\n  }\r\n\r\n  // function to load web3 (async function), connect the app to the blockchain\r\n  async loadWeb3() {\r\n    // if we detect ethereum in window\r\n    if (window.ethereum) {\r\n      // create a new instance of Web3 using the detected ethereum provider\r\n      //allows the app to interact with the Ethereum blockchain\r\n      window.web3 = new Web3(window.ethereum);\r\n      try {\r\n        // requests the user's permission to connect the app to their Ethereum accounts\r\n        // using the recommended eth_requestAccounts method\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      } catch (error) {\r\n        // Handle error (user denied account access)\r\n        console.error(\"User denied account access:\", error);\r\n      }\r\n    } else if (window.web3) {\r\n      // if no ethereum provider but web3 is present, create a new Web3 instance using the current provider\r\n      window.web3 = new this.Web3(window.web3.currentProvider);\r\n    } else {\r\n      // if no ethereum provider or web3, show an alert indicating that no ethereum browser is detected\r\n      window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\r\n    }\r\n  }\r\n\r\n  async loadBlockChainData() {\r\n    const web3 = window.web3;\r\n    //get acc from blockchain data\r\n    const account = await web3.eth.getAccounts();\r\n    //set the state here to update the account\r\n    //account[0], first acc address in the account variable\r\n    this.setState({ account: account[0] });\r\n    //the account address in metamask will show in console\r\n    //console.log(account);\r\n\r\n    //loading from which network, ganache is one of the ethereum network (network id:5777)\r\n    //how do we set our network to 5777\r\n    //// Get the network ID using web3.eth.net.getId()\r\n    const networkID = await web3.eth.net.getId();\r\n    //the network id 5777 will show in console log\r\n    //console.log(networkID, \"Network ID\");\r\n    //output: 5777 'Network ID'\r\n\r\n    //load up tether contract\r\n    //tetherData is an attempt to access the deployment information for the current network using the networkID as the key\r\n    //tetherData should contain information about the Tether contract on the current network\r\n    const tetherData = Tether.networks[networkID];\r\n    //if the app find the tetherData loading\r\n    //Common falsy values include false, null, undefined, 0, NaN, and an empty string ('')\r\n    //Truthy values include non-empty strings, numbers other than 0, objects, arrays, and other non-falsy values\r\n    if (tetherData) {\r\n      //creates a contract instance named tether using the web3.eth.Contract constructor\r\n      //requires the contract's ABI (Tether.abi) and the contract address (tetherData.address).\r\n      //tether contract\r\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\r\n      //setting the state to tether (object type)\r\n      this.setState({ tether });\r\n\r\n      //balance of the state of account\r\n      //if grabbing through web3, require .methods, method have to run the call function\r\n      let tetherBalance = await tether.methods\r\n        .balanceOf(this.state.account)\r\n        .call();\r\n      //setting the state to tetherBalance\r\n      this.setState({ tetherBalance: tetherBalance.toString() });\r\n      //console.log({ balance: tetherBalance });\r\n      //output: {balance: '100000000000000000000'}\r\n    } else {\r\n      window.alert(\"Error! Tether contract not deployed - no detected network\");\r\n    }\r\n\r\n    const rwdData = RWD.networks[networkID];\r\n    if (rwdData) {\r\n      const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\r\n      this.setState({ rwd });\r\n\r\n      let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\r\n      this.setState({ Balance: rwdBalance.toString() });\r\n    }\r\n  }\r\n\r\n  //props: special feature/parameter in react, allow us to passover properties fromone component to another\r\n  constructor(props) {\r\n    super(props);\r\n    //set our state\r\n    // we have lot of state, so create an object and put all state in the object\r\n    this.state = {\r\n      //setup state\r\n      account: \"0x0\",\r\n      //send state as props to navbar, want acc info to appear in navbar\r\n      //create a property called account in <Navbar>, then we hv applied state to account in navbar by passing it through props\r\n\r\n      //initialize state for all contract and the balance of all contract (deposit, withdraw, issue token)\r\n      //contarct is an object {}, initialize contarct as empty\r\n      //intialize other state (except loading) as number value\r\n      tether: {},\r\n      rwd: {},\r\n      decentralBank: {},\r\n      tetherBalance: \"0\",\r\n      rwdBalance: \"0\",\r\n      stakingBalance: \"0\",\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}