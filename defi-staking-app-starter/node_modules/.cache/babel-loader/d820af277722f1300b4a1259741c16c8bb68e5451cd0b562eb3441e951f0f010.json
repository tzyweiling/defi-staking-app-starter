{"ast":null,"code":"var _jsxFileName = \"D:\\\\Documents\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./NavBar\";\nimport Web3 from \"web3/dist/web3.min.js\";\nimport Tether from \"../truffle_abis/Tether.json\";\nimport RWD from \"../truffle_abis/RWD.json\";\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\nimport Main from \"./Main\";\nimport ParticleSettings from \"./ParticleSettings\";\nclass App extends Component {\n  //called immediately before mounting  occurs\n  //component is considered unsafe by react, best practice using UNSAFE_\n  //make sure metamask is load\n  async UNSAFE_componentWillMount() {\n    await this.loadWeb3();\n    await this.loadBlockChainData();\n  }\n\n  // function to load web3 (async function), connect the app to the blockchain\n  async loadWeb3() {\n    // if we detect ethereum in window\n    if (window.ethereum) {\n      // create a new instance of Web3 using the detected ethereum provider\n      //allows the app to interact with the Ethereum blockchain\n      window.web3 = new Web3(window.ethereum);\n      try {\n        // requests the user's permission to connect the app to their Ethereum accounts\n        // using the recommended eth_requestAccounts method\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n      } catch (error) {\n        // Handle error (user denied account access)\n        console.error(\"User denied account access:\", error);\n      }\n    } else if (window.web3) {\n      // if no ethereum provider but web3 is present, create a new Web3 instance using the current provider\n      window.web3 = new this.Web3(window.web3.currentProvider);\n    } else {\n      // if no ethereum provider or web3, show an alert indicating that no ethereum browser is detected\n      window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\n    }\n  }\n  async loadBlockChainData() {\n    const web3 = window.web3;\n    //get acc from blockchain data\n    const account = await web3.eth.getAccounts();\n    //set the state here to update the account\n    //account[0], first acc address in the account variable\n    this.setState({\n      account: account[0]\n    });\n    //the account address in metamask will show in console\n    //console.log(account);\n\n    //loading from which network, ganache is one of the ethereum network (network id:5777)\n    //how do we set our network to 5777\n    //// Get the network ID using web3.eth.net.getId()\n    const networkID = await web3.eth.net.getId();\n    //the network id 5777 will show in console log\n    //console.log(networkID, \"Network ID\");\n    //output: 5777 'Network ID'\n\n    //load Tether contract\n    //tetherData is an attempt to access the deployment information for the current network using the networkID as the key\n    //tetherData should contain information about the Tether contract on the current network\n    const tetherData = Tether.networks[networkID];\n    //if the app find the tetherData loading\n    //Common falsy values include false, null, undefined, 0, NaN, and an empty string ('')\n    //Truthy values include non-empty strings, numbers other than 0, objects, arrays, and other non-falsy values\n    if (tetherData) {\n      //creates a contract instance named tether using the web3.eth.Contract constructor\n      //requires the contract's ABI (Tether.abi) and the contract address (tetherData.address).\n      //tether contract\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n      //setting the state to tether (object type)\n      this.setState({\n        tether\n      });\n\n      //balance of the state of account\n      //if grabbing through web3, require .methods, method have to run the call function\n      let tetherBalance = await tether.methods.balanceOf(this.state.account).call();\n      //setting the state to tetherBalance\n      this.setState({\n        tetherBalance: tetherBalance.toString()\n      });\n      //console.log({ tether_balance: tetherBalance });\n      //output: {tether_balance: '100000000000000000000'}\n    } else {\n      window.alert(\"Error! Tether token not deployed - no detected network\");\n    }\n\n    //load RWD contract\n    const rwdData = RWD.networks[networkID];\n    if (rwdData) {\n      const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\n      this.setState({\n        rwd\n      });\n      let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\n      this.setState({\n        rwdBalance: rwdBalance.toString()\n      });\n      //console.log({ reward_balance: rwdBalance });\n      //output: {reward_balance: '0'}\n    } else {\n      window.alert(\"Error! Reward token not deployed - no detected network\");\n    }\n\n    //load DecentralBank contract\n    const decentralBankData = DecentralBank.networks[networkID];\n    if (decentralBankData) {\n      const decentralBank = new web3.eth.Contract(DecentralBank.abi, decentralBankData.address);\n      this.setState({\n        decentralBank\n      });\n      let stakingBalance = await decentralBank.methods.stakingBalance(this.state.account).call();\n      this.setState({\n        stakingBalance: stakingBalance.toString()\n      });\n      //console.log({ staking_balance: stakingBalance });\n      //output: {staking_balance: '0'}\n    } else {\n      window.alert(\"Error! Decentral Bank contract not deployed - no detected network\");\n    }\n\n    //change the state of loading after completing loading all contract\n    this.setState({\n      loading: false\n    });\n  }\n\n  //two fucntion: one that stakes and one that unstakes\n  //leverage function created in decentralBank contract: deposit Tokens and unstaking\n  //staking function: decentralBank.depositTokens(send transaction over, tarnsaction hash)\n  //depositToken..transferFrom() from Tether, require to run the function approve tarnsaction before deposit tokens\n\n  //staking function\n  //everytime we run this, reset the loading to true until finish running the function, thens et back to false\n\n  //props: special feature/parameter in react, allow us to passover properties fromone component to another\n  constructor(props) {\n    super(props);\n    //set our state\n    // we have lot of state, so create an object and put all state in the object\n    this.stakeTokens = amount => {\n      this.setState({\n        loading: true\n      });\n      //get approval first\n      this.state.tether.methods.approve(this.state.decentralBank._address, amount).send({\n        from: this.state.account\n      }).on(\"transactionHash\", hash => {\n        this.state.decentralBank.methods //get decentralBank contract\n        .depositTokens(amount) //get depositTokens function, set it to the amount input\n        .send({\n          from: this.state.account\n        }) //send it over from the account, then transaction processed\n        .on(\"transactionHash\", hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n    this.unstakeTokens = amount => {\n      this.setState({\n        loading: true\n      });\n      this.state.decentralBank.methods.unstakeTokens().send;\n    };\n    this.state = {\n      //setup state\n      account: \"0x0\",\n      //send state as props to navbar, want acc info to appear in navbar\n      //create a property called account in <Navbar>, then we hv applied state to account in navbar by passing it through props\n\n      //initialize state for all contract and the balance of all contract (deposit, withdraw, issue token)\n      //contarct is an object {}, initialize contarct as empty\n      //intialize other state (except loading) as number value\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: \"0\",\n      rwdBalance: \"0\",\n      stakingBalance: \"0\",\n      loading: true\n    };\n  }\n  render() {\n    let content;\n    /*conditional statement, if statment, is the state of loading is true, show LOADING PlEASE, if false do the action after :*/\n    {\n      this.state.loading ? content = /*#__PURE__*/React.createElement(\"p\", {\n        id: \"loader\",\n        className: \"text-center\",\n        style: {\n          margin: \"30px\",\n          color: \"white\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }\n      }, \"LOADING PLEASE...\") : content = /*#__PURE__*/React.createElement(Main, {\n        tetherBalance: this.state.tetherBalance,\n        rwdBalance: this.state.rwdBalance,\n        stakingBalance: this.state.stakingBalance\n        /*pass function as properties*/,\n        stakeTokens: this.stakeTokens,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }\n      });\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        position: \"relative\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        position: \"absolute\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ParticleSettings, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"main\", {\n      role: \"main\",\n      className: \"col-lg-12 ml-auto mr-auto\",\n      style: {\n        maxWidth: \"600px\",\n        minHeight: \"100vm\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }\n    }, content)))));\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","ParticleSettings","App","UNSAFE_componentWillMount","loadWeb3","loadBlockChainData","window","ethereum","web3","request","method","error","console","currentProvider","alert","account","eth","getAccounts","setState","networkID","net","getId","tetherData","networks","tether","Contract","abi","address","tetherBalance","methods","balanceOf","state","call","toString","rwdData","rwd","rwdBalance","decentralBankData","decentralBank","stakingBalance","loading","constructor","props","stakeTokens","amount","approve","_address","send","from","on","hash","depositTokens","unstakeTokens","render","content","createElement","id","className","style","margin","color","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","position","role","maxWidth","minHeight"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./NavBar\";\r\nimport Web3 from \"web3/dist/web3.min.js\";\r\nimport Tether from \"../truffle_abis/Tether.json\";\r\nimport RWD from \"../truffle_abis/RWD.json\";\r\nimport DecentralBank from \"../truffle_abis/DecentralBank.json\";\r\nimport Main from \"./Main\";\r\nimport ParticleSettings from \"./ParticleSettings\";\r\n\r\nclass App extends Component {\r\n  //called immediately before mounting  occurs\r\n  //component is considered unsafe by react, best practice using UNSAFE_\r\n  //make sure metamask is load\r\n  async UNSAFE_componentWillMount() {\r\n    await this.loadWeb3();\r\n    await this.loadBlockChainData();\r\n  }\r\n\r\n  // function to load web3 (async function), connect the app to the blockchain\r\n  async loadWeb3() {\r\n    // if we detect ethereum in window\r\n    if (window.ethereum) {\r\n      // create a new instance of Web3 using the detected ethereum provider\r\n      //allows the app to interact with the Ethereum blockchain\r\n      window.web3 = new Web3(window.ethereum);\r\n      try {\r\n        // requests the user's permission to connect the app to their Ethereum accounts\r\n        // using the recommended eth_requestAccounts method\r\n        await window.ethereum.request({ method: \"eth_requestAccounts\" });\r\n      } catch (error) {\r\n        // Handle error (user denied account access)\r\n        console.error(\"User denied account access:\", error);\r\n      }\r\n    } else if (window.web3) {\r\n      // if no ethereum provider but web3 is present, create a new Web3 instance using the current provider\r\n      window.web3 = new this.Web3(window.web3.currentProvider);\r\n    } else {\r\n      // if no ethereum provider or web3, show an alert indicating that no ethereum browser is detected\r\n      window.alert(\"No ethereum browser detected! You can check out MetaMask!\");\r\n    }\r\n  }\r\n\r\n  async loadBlockChainData() {\r\n    const web3 = window.web3;\r\n    //get acc from blockchain data\r\n    const account = await web3.eth.getAccounts();\r\n    //set the state here to update the account\r\n    //account[0], first acc address in the account variable\r\n    this.setState({ account: account[0] });\r\n    //the account address in metamask will show in console\r\n    //console.log(account);\r\n\r\n    //loading from which network, ganache is one of the ethereum network (network id:5777)\r\n    //how do we set our network to 5777\r\n    //// Get the network ID using web3.eth.net.getId()\r\n    const networkID = await web3.eth.net.getId();\r\n    //the network id 5777 will show in console log\r\n    //console.log(networkID, \"Network ID\");\r\n    //output: 5777 'Network ID'\r\n\r\n    //load Tether contract\r\n    //tetherData is an attempt to access the deployment information for the current network using the networkID as the key\r\n    //tetherData should contain information about the Tether contract on the current network\r\n    const tetherData = Tether.networks[networkID];\r\n    //if the app find the tetherData loading\r\n    //Common falsy values include false, null, undefined, 0, NaN, and an empty string ('')\r\n    //Truthy values include non-empty strings, numbers other than 0, objects, arrays, and other non-falsy values\r\n    if (tetherData) {\r\n      //creates a contract instance named tether using the web3.eth.Contract constructor\r\n      //requires the contract's ABI (Tether.abi) and the contract address (tetherData.address).\r\n      //tether contract\r\n      const tether = new web3.eth.Contract(Tether.abi, tetherData.address);\r\n      //setting the state to tether (object type)\r\n      this.setState({ tether });\r\n\r\n      //balance of the state of account\r\n      //if grabbing through web3, require .methods, method have to run the call function\r\n      let tetherBalance = await tether.methods\r\n        .balanceOf(this.state.account)\r\n        .call();\r\n      //setting the state to tetherBalance\r\n      this.setState({ tetherBalance: tetherBalance.toString() });\r\n      //console.log({ tether_balance: tetherBalance });\r\n      //output: {tether_balance: '100000000000000000000'}\r\n    } else {\r\n      window.alert(\"Error! Tether token not deployed - no detected network\");\r\n    }\r\n\r\n    //load RWD contract\r\n    const rwdData = RWD.networks[networkID];\r\n    if (rwdData) {\r\n      const rwd = new web3.eth.Contract(RWD.abi, rwdData.address);\r\n      this.setState({ rwd });\r\n\r\n      let rwdBalance = await rwd.methods.balanceOf(this.state.account).call();\r\n      this.setState({ rwdBalance: rwdBalance.toString() });\r\n      //console.log({ reward_balance: rwdBalance });\r\n      //output: {reward_balance: '0'}\r\n    } else {\r\n      window.alert(\"Error! Reward token not deployed - no detected network\");\r\n    }\r\n\r\n    //load DecentralBank contract\r\n    const decentralBankData = DecentralBank.networks[networkID];\r\n    if (decentralBankData) {\r\n      const decentralBank = new web3.eth.Contract(\r\n        DecentralBank.abi,\r\n        decentralBankData.address\r\n      );\r\n      this.setState({ decentralBank });\r\n\r\n      let stakingBalance = await decentralBank.methods\r\n        .stakingBalance(this.state.account)\r\n        .call();\r\n      this.setState({ stakingBalance: stakingBalance.toString() });\r\n      //console.log({ staking_balance: stakingBalance });\r\n      //output: {staking_balance: '0'}\r\n    } else {\r\n      window.alert(\r\n        \"Error! Decentral Bank contract not deployed - no detected network\"\r\n      );\r\n    }\r\n\r\n    //change the state of loading after completing loading all contract\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  //two fucntion: one that stakes and one that unstakes\r\n  //leverage function created in decentralBank contract: deposit Tokens and unstaking\r\n  //staking function: decentralBank.depositTokens(send transaction over, tarnsaction hash)\r\n  //depositToken..transferFrom() from Tether, require to run the function approve tarnsaction before deposit tokens\r\n\r\n  //staking function\r\n  //everytime we run this, reset the loading to true until finish running the function, thens et back to false\r\n  stakeTokens = (amount) => {\r\n    this.setState({ loading: true });\r\n    //get approval first\r\n    this.state.tether.methods\r\n      .approve(this.state.decentralBank._address, amount)\r\n      .send({ from: this.state.account })\r\n      .on(\"transactionHash\", (hash) => {\r\n        this.state.decentralBank.methods //get decentralBank contract\r\n          .depositTokens(amount) //get depositTokens function, set it to the amount input\r\n          .send({ from: this.state.account }) //send it over from the account, then transaction processed\r\n          .on(\"transactionHash\", (hash) => {\r\n            this.setState({ loading: false });\r\n          });\r\n      });\r\n  };\r\n\r\n  unstakeTokens = (amount) => {\r\n    this.setState({loading: true})\r\n    this.state.decentralBank.methods.unstakeTokens().send\r\n  }\r\n\r\n  //props: special feature/parameter in react, allow us to passover properties fromone component to another\r\n  constructor(props) {\r\n    super(props);\r\n    //set our state\r\n    // we have lot of state, so create an object and put all state in the object\r\n    this.state = {\r\n      //setup state\r\n      account: \"0x0\",\r\n      //send state as props to navbar, want acc info to appear in navbar\r\n      //create a property called account in <Navbar>, then we hv applied state to account in navbar by passing it through props\r\n\r\n      //initialize state for all contract and the balance of all contract (deposit, withdraw, issue token)\r\n      //contarct is an object {}, initialize contarct as empty\r\n      //intialize other state (except loading) as number value\r\n      tether: {},\r\n      rwd: {},\r\n      decentralBank: {},\r\n      tetherBalance: \"0\",\r\n      rwdBalance: \"0\",\r\n      stakingBalance: \"0\",\r\n      loading: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let content;\r\n    /*conditional statement, if statment, is the state of loading is true, show LOADING PlEASE, if false do the action after :*/\r\n    {\r\n      this.state.loading\r\n        ? (content = (\r\n            <p\r\n              id=\"loader\"\r\n              className=\"text-center\"\r\n              style={{ margin: \"30px\", color: \"white\" }}\r\n            >\r\n              LOADING PLEASE...\r\n            </p>\r\n          ))\r\n        : (content = (\r\n            <Main\r\n              tetherBalance={this.state.tetherBalance}\r\n              rwdBalance={this.state.rwdBalance}\r\n              stakingBalance={this.state.stakingBalance}\r\n              /*pass function as properties*/\r\n              stakeTokens={this.stakeTokens}\r\n            />\r\n          ));\r\n    }\r\n    return (\r\n      <div className=\"App\" style={{ position: \"relative\" }}>\r\n        <div style={{ position: \"absolute\" }}>\r\n          <ParticleSettings />\r\n        </div>\r\n        <Navbar account={this.state.account} />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main\r\n              role=\"main\"\r\n              className=\"col-lg-12 ml-auto mr-auto\"\r\n              style={{ maxWidth: \"600px\", minHeight: \"100vm\" }}\r\n            >\r\n              <div>{content}</div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}