{"ast":null,"code":"const BN = require(\"bn.js\");\nconst Bytes = require(\"./bytes\");\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\nconst toBN = str => new BN(str.slice(2), 16);\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\nconst toString = a => toBN(a).toString(10);\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\nconst toNumber = a => toBN(a).toNumber();\nconst toUint256 = a => Bytes.pad(32, a);\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};","map":{"version":3,"names":["BN","require","Bytes","fromBN","bn","toString","toBN","str","slice","fromString","toEther","wei","toNumber","div","fromEther","eth","mul","fromNumber","Math","floor","a","test","toUint256","pad","bin","method","b","add","sub","module","exports"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/nat.js"],"sourcesContent":["const BN = require(\"bn.js\");\nconst Bytes = require(\"./bytes\");\n\nconst fromBN = bn => \"0x\" + bn.toString(\"hex\");\n\nconst toBN = str => new BN(str.slice(2), 16);\n\nconst fromString = str => {\n  const bn = \"0x\" + (str.slice(0, 2) === \"0x\" ? new BN(str.slice(2), 16) : new BN(str, 10)).toString(\"hex\");\n  return bn === \"0x0\" ? \"0x\" : bn;\n};\n\nconst toEther = wei => toNumber(div(wei, fromString(\"10000000000\"))) / 100000000;\n\nconst fromEther = eth => mul(fromNumber(Math.floor(eth * 100000000)), fromString(\"10000000000\"));\n\nconst toString = a => toBN(a).toString(10);\n\nconst fromNumber = a => typeof a === \"string\" ? /^0x/.test(a) ? a : \"0x\" + a : \"0x\" + new BN(a).toString(\"hex\");\n\nconst toNumber = a => toBN(a).toNumber();\n\nconst toUint256 = a => Bytes.pad(32, a);\n\nconst bin = method => (a, b) => fromBN(toBN(a)[method](toBN(b)));\n\nconst add = bin(\"add\");\nconst mul = bin(\"mul\");\nconst div = bin(\"div\");\nconst sub = bin(\"sub\");\n\nmodule.exports = {\n  toString,\n  fromString,\n  toNumber,\n  fromNumber,\n  toEther,\n  fromEther,\n  toUint256,\n  add,\n  mul,\n  div,\n  sub\n};"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC3B,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAS,CAAC;AAEhC,MAAME,MAAM,GAAGC,EAAE,IAAI,IAAI,GAAGA,EAAE,CAACC,QAAQ,CAAC,KAAK,CAAC;AAE9C,MAAMC,IAAI,GAAGC,GAAG,IAAI,IAAIP,EAAE,CAACO,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AAE5C,MAAMC,UAAU,GAAGF,GAAG,IAAI;EACxB,MAAMH,EAAE,GAAG,IAAI,GAAG,CAACG,GAAG,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,GAAG,IAAIR,EAAE,CAACO,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAIR,EAAE,CAACO,GAAG,EAAE,EAAE,CAAC,EAAEF,QAAQ,CAAC,KAAK,CAAC;EACzG,OAAOD,EAAE,KAAK,KAAK,GAAG,IAAI,GAAGA,EAAE;AACjC,CAAC;AAED,MAAMM,OAAO,GAAGC,GAAG,IAAIC,QAAQ,CAACC,GAAG,CAACF,GAAG,EAAEF,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,SAAS;AAEhF,MAAMK,SAAS,GAAGC,GAAG,IAAIC,GAAG,CAACC,UAAU,CAACC,IAAI,CAACC,KAAK,CAACJ,GAAG,GAAG,SAAS,CAAC,CAAC,EAAEN,UAAU,CAAC,aAAa,CAAC,CAAC;AAEhG,MAAMJ,QAAQ,GAAGe,CAAC,IAAId,IAAI,CAACc,CAAC,CAAC,CAACf,QAAQ,CAAC,EAAE,CAAC;AAE1C,MAAMY,UAAU,GAAGG,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,GAAG,KAAK,CAACC,IAAI,CAACD,CAAC,CAAC,GAAGA,CAAC,GAAG,IAAI,GAAGA,CAAC,GAAG,IAAI,GAAG,IAAIpB,EAAE,CAACoB,CAAC,CAAC,CAACf,QAAQ,CAAC,KAAK,CAAC;AAE/G,MAAMO,QAAQ,GAAGQ,CAAC,IAAId,IAAI,CAACc,CAAC,CAAC,CAACR,QAAQ,CAAC,CAAC;AAExC,MAAMU,SAAS,GAAGF,CAAC,IAAIlB,KAAK,CAACqB,GAAG,CAAC,EAAE,EAAEH,CAAC,CAAC;AAEvC,MAAMI,GAAG,GAAGC,MAAM,IAAI,CAACL,CAAC,EAAEM,CAAC,KAAKvB,MAAM,CAACG,IAAI,CAACc,CAAC,CAAC,CAACK,MAAM,CAAC,CAACnB,IAAI,CAACoB,CAAC,CAAC,CAAC,CAAC;AAEhE,MAAMC,GAAG,GAAGH,GAAG,CAAC,KAAK,CAAC;AACtB,MAAMR,GAAG,GAAGQ,GAAG,CAAC,KAAK,CAAC;AACtB,MAAMX,GAAG,GAAGW,GAAG,CAAC,KAAK,CAAC;AACtB,MAAMI,GAAG,GAAGJ,GAAG,CAAC,KAAK,CAAC;AAEtBK,MAAM,CAACC,OAAO,GAAG;EACfzB,QAAQ;EACRI,UAAU;EACVG,QAAQ;EACRK,UAAU;EACVP,OAAO;EACPI,SAAS;EACTQ,SAAS;EACTK,GAAG;EACHX,GAAG;EACHH,GAAG;EACHe;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}