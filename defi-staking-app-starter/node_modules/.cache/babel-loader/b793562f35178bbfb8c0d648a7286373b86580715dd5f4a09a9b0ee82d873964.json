{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst ExternalInteractorBase_1 = require(\"../../Core/ExternalInteractorBase\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue > optionsValue) {\n    const size = particleValue + (modeValue - optionsValue) * ratio;\n    return Utils_1.clamp(size, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const size = particleValue - (optionsValue - modeValue) * ratio;\n    return Utils_1.clamp(size, modeValue, particleValue);\n  }\n}\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n  }\n  isEnabled() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const mouse = container.interactivity.mouse;\n    const events = options.interactivity.events;\n    const divs = events.onDiv;\n    const divBubble = Utils_1.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n  }\n  reset(particle, force) {\n    if (!particle.bubble.inRange || force) {\n      delete particle.bubble.div;\n      delete particle.bubble.opacity;\n      delete particle.bubble.radius;\n      delete particle.bubble.color;\n    }\n  }\n  interact() {\n    const options = this.container.actualOptions;\n    const events = options.interactivity.events;\n    const onHover = events.onHover;\n    const onClick = events.onClick;\n    const hoverEnabled = onHover.enable;\n    const hoverMode = onHover.mode;\n    const clickEnabled = onClick.enable;\n    const clickMode = onClick.mode;\n    const divs = events.onDiv;\n    if (hoverEnabled && Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n      this.clickBubble();\n    } else {\n      Utils_1.divModeExecute(Enums_1.DivMode.bubble, divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n  singleSelectorHover(selector, div) {\n    const container = this.container;\n    const selectors = document.querySelectorAll(selector);\n    if (!selectors.length) {\n      return;\n    }\n    selectors.forEach(item => {\n      const elem = item;\n      const pxRatio = container.retina.pixelRatio;\n      const pos = {\n        x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n        y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n      };\n      const repulseRadius = elem.offsetWidth / 2 * pxRatio;\n      const area = div.type === Enums_1.DivType.circle ? new Utils_1.Circle(pos.x, pos.y, repulseRadius) : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);\n      const query = container.particles.quadTree.query(area);\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = Utils_1.divMode(divs, elem);\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, divBubble);\n      }\n    });\n  }\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container;\n    const bubbleParam = data.bubbleObj.optValue;\n    if (bubbleParam === undefined) {\n      return;\n    }\n    const options = container.actualOptions;\n    const bubbleDuration = options.interactivity.modes.bubble.duration;\n    const bubbleDistance = container.retina.bubbleModeDistance;\n    const particlesParam = data.particlesObj.optValue;\n    const pObjBubble = data.bubbleObj.value;\n    const pObj = data.particlesObj.value || 0;\n    const type = data.type;\n    if (bubbleParam !== particlesParam) {\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= bubbleDistance) {\n          const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n          if (obj !== bubbleParam) {\n            const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n            if (type === Enums_1.ProcessBubbleType.size) {\n              particle.bubble.radius = value;\n            }\n            if (type === Enums_1.ProcessBubbleType.opacity) {\n              particle.bubble.opacity = value;\n            }\n          }\n        } else {\n          if (type === Enums_1.ProcessBubbleType.size) {\n            delete particle.bubble.radius;\n          }\n          if (type === Enums_1.ProcessBubbleType.opacity) {\n            delete particle.bubble.opacity;\n          }\n        }\n      } else if (pObjBubble) {\n        if (type === Enums_1.ProcessBubbleType.size) {\n          delete particle.bubble.radius;\n        }\n        if (type === Enums_1.ProcessBubbleType.opacity) {\n          delete particle.bubble.opacity;\n        }\n      }\n    }\n  }\n  clickBubble() {\n    const container = this.container;\n    const options = container.actualOptions;\n    const mouseClickPos = container.interactivity.mouse.clickPosition;\n    if (mouseClickPos === undefined) {\n      return;\n    }\n    const distance = container.retina.bubbleModeDistance;\n    const query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition();\n      const distMouse = Utils_1.getDistance(pos, mouseClickPos);\n      const timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: Enums_1.ProcessBubbleType.size\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: Utils_1.getRangeMax(particle.options.opacity.value),\n          value: particle.opacity.value\n        },\n        type: Enums_1.ProcessBubbleType.opacity\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n  hoverBubble() {\n    const container = this.container;\n    const mousePos = container.interactivity.mouse.position;\n    if (mousePos === undefined) {\n      return;\n    }\n    const distance = container.retina.bubbleModeDistance;\n    const query = container.particles.quadTree.queryCircle(mousePos, distance);\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition();\n      const pointDistance = Utils_1.getDistance(pos, mousePos);\n      const ratio = 1 - pointDistance / distance;\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle);\n        }\n      } else {\n        this.reset(particle);\n      }\n      if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container;\n    const modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n    if (modeSize === undefined) {\n      return;\n    }\n    const optSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a;\n    const options = this.container.actualOptions;\n    const modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n    if (modeOpacity === undefined) {\n      return;\n    }\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = particle.opacity.value;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, Utils_1.getRangeMax(optOpacity), ratio);\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n  hoverBubbleColor(particle, divBubble) {\n    var _a;\n    const options = this.container.actualOptions;\n    if (particle.bubble.color === undefined) {\n      const modeColor = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.color) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.color;\n      if (modeColor === undefined) {\n        return;\n      }\n      const bubbleColor = modeColor instanceof Array ? Utils_1.itemFromArray(modeColor) : modeColor;\n      particle.bubble.color = Utils_1.colorToHsl(bubbleColor);\n    }\n  }\n}\nexports.Bubbler = Bubbler;","map":{"version":3,"names":["Object","defineProperty","exports","value","Bubbler","Utils_1","require","Enums_1","ExternalInteractorBase_1","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","size","clamp","ExternalInteractorBase","constructor","container","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","isDivModeEnabled","DivMode","bubble","onHover","enable","position","onClick","clickPosition","hoverMode","mode","clickMode","isInArray","HoverMode","ClickMode","reset","particle","force","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","divModeExecute","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","DivType","circle","Circle","Rectangle","query","particles","quadTree","contains","getPosition","modes","divMode","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","ProcessBubbleType","mouseClickPos","distance","queryCircle","clicking","getDistance","Date","getTime","clickTime","sizeData","bubbleModeSize","getRangeMax","opacityData","mousePos","pointDistance","status","Constants","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_a","modeOpacity","optOpacity","pOpacity","modeColor","bubbleColor","Array","itemFromArray","colorToHsl"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/tsparticles/Interactions/External/Bubbler.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bubbler = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst ExternalInteractorBase_1 = require(\"../../Core/ExternalInteractorBase\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue > optionsValue) {\n        const size = particleValue + (modeValue - optionsValue) * ratio;\n        return Utils_1.clamp(size, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const size = particleValue - (optionsValue - modeValue) * ratio;\n        return Utils_1.clamp(size, modeValue, particleValue);\n    }\n}\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    isEnabled() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const mouse = container.interactivity.mouse;\n        const events = options.interactivity.events;\n        const divs = events.onDiv;\n        const divBubble = Utils_1.isDivModeEnabled(Enums_1.DivMode.bubble, divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode) || Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!particle.bubble.inRange || force) {\n            delete particle.bubble.div;\n            delete particle.bubble.opacity;\n            delete particle.bubble.radius;\n            delete particle.bubble.color;\n        }\n    }\n    interact() {\n        const options = this.container.actualOptions;\n        const events = options.interactivity.events;\n        const onHover = events.onHover;\n        const onClick = events.onClick;\n        const hoverEnabled = onHover.enable;\n        const hoverMode = onHover.mode;\n        const clickEnabled = onClick.enable;\n        const clickMode = onClick.mode;\n        const divs = events.onDiv;\n        if (hoverEnabled && Utils_1.isInArray(Enums_1.HoverMode.bubble, hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && Utils_1.isInArray(Enums_1.ClickMode.bubble, clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            Utils_1.divModeExecute(Enums_1.DivMode.bubble, divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container;\n        const selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item;\n            const pxRatio = container.retina.pixelRatio;\n            const pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            };\n            const repulseRadius = (elem.offsetWidth / 2) * pxRatio;\n            const area = div.type === Enums_1.DivType.circle\n                ? new Utils_1.Circle(pos.x, pos.y, repulseRadius)\n                : new Utils_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio);\n            const query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = Utils_1.divMode(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container;\n        const bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions;\n        const bubbleDuration = options.interactivity.modes.bubble.duration;\n        const bubbleDistance = container.retina.bubbleModeDistance;\n        const particlesParam = data.particlesObj.optValue;\n        const pObjBubble = data.bubbleObj.value;\n        const pObj = data.particlesObj.value || 0;\n        const type = data.type;\n        if (bubbleParam !== particlesParam) {\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === Enums_1.ProcessBubbleType.size) {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === Enums_1.ProcessBubbleType.opacity) {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === Enums_1.ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === Enums_1.ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else if (pObjBubble) {\n                if (type === Enums_1.ProcessBubbleType.size) {\n                    delete particle.bubble.radius;\n                }\n                if (type === Enums_1.ProcessBubbleType.opacity) {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n    }\n    clickBubble() {\n        const container = this.container;\n        const options = container.actualOptions;\n        const mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (mouseClickPos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance;\n        const query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition();\n            const distMouse = Utils_1.getDistance(pos, mouseClickPos);\n            const timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: Enums_1.ProcessBubbleType.size,\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: Utils_1.getRangeMax(particle.options.opacity.value),\n                    value: particle.opacity.value,\n                },\n                type: Enums_1.ProcessBubbleType.opacity,\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container;\n        const mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance;\n        const query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition();\n            const pointDistance = Utils_1.getDistance(pos, mousePos);\n            const ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Utils_1.Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Utils_1.Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container;\n        const modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size)\n            ? divBubble.size * container.retina.pixelRatio\n            : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a;\n        const options = this.container.actualOptions;\n        const modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (modeOpacity === undefined) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = particle.opacity.value;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, Utils_1.getRangeMax(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, divBubble) {\n        var _a;\n        const options = this.container.actualOptions;\n        if (particle.bubble.color === undefined) {\n            const modeColor = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.color) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.color;\n            if (modeColor === undefined) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? Utils_1.itemFromArray(modeColor) : modeColor;\n            particle.bubble.color = Utils_1.colorToHsl(bubbleColor);\n        }\n    }\n}\nexports.Bubbler = Bubbler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}