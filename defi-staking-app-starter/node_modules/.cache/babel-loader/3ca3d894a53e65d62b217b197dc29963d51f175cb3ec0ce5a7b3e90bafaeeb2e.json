{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmitterInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst EmitterSize_1 = require(\"./Options/Classes/EmitterSize\");\nfunction randomCoordinate(position, offset) {\n  return position + offset * (Math.random() - 0.5);\n}\nfunction randomPosition(position, offset) {\n  return {\n    x: randomCoordinate(position.x, offset.x),\n    y: randomCoordinate(position.y, offset.y)\n  };\n}\nclass EmitterInstance {\n  constructor(emitters, container, emitterOptions, position) {\n    var _a, _b, _c, _d, _e, _f;\n    var _g;\n    this.emitters = emitters;\n    this.container = container;\n    this.firstSpawn = true;\n    this.currentDuration = 0;\n    this.currentEmitDelay = 0;\n    this.currentSpawnDelay = 0;\n    this.initialPosition = position;\n    this.emitterOptions = Utils_1.deepExtend({}, emitterOptions);\n    this.spawnDelay = ((_a = this.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000 / this.container.retina.reduceFactor;\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n    this.name = emitterOptions.name;\n    let particlesOptions = Utils_1.deepExtend({}, this.emitterOptions.particles);\n    particlesOptions !== null && particlesOptions !== void 0 ? particlesOptions : particlesOptions = {};\n    (_c = particlesOptions.move) !== null && _c !== void 0 ? _c : particlesOptions.move = {};\n    (_d = (_g = particlesOptions.move).direction) !== null && _d !== void 0 ? _d : _g.direction = this.emitterOptions.direction;\n    if (this.emitterOptions.spawnColor !== undefined) {\n      this.spawnColor = Utils_1.colorToHsl(this.emitterOptions.spawnColor);\n    }\n    this.paused = !this.emitterOptions.autoPlay;\n    this.particlesOptions = particlesOptions;\n    this.size = (_e = this.emitterOptions.size) !== null && _e !== void 0 ? _e : (() => {\n      const size = new EmitterSize_1.EmitterSize();\n      size.load({\n        height: 0,\n        mode: Enums_1.SizeMode.percent,\n        width: 0\n      });\n      return size;\n    })();\n    this.lifeCount = (_f = this.emitterOptions.life.count) !== null && _f !== void 0 ? _f : -1;\n    this.immortal = this.lifeCount <= 0;\n    this.play();\n  }\n  externalPlay() {\n    this.paused = false;\n    this.play();\n  }\n  externalPause() {\n    this.paused = true;\n    this.pause();\n  }\n  play() {\n    if (this.paused) {\n      return;\n    }\n    if (this.container.retina.reduceFactor && (this.lifeCount > 0 || this.immortal || !this.emitterOptions.life.count)) {\n      if (this.emitDelay === undefined) {\n        const delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\n        this.emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n      }\n      if (this.lifeCount > 0 || this.immortal) {\n        this.prepareToDie();\n      }\n    }\n  }\n  pause() {\n    if (this.paused) {\n      return;\n    }\n    delete this.emitDelay;\n  }\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n  update(delta) {\n    var _a, _b, _c;\n    if (this.paused) {\n      return;\n    }\n    if (this.firstSpawn) {\n      this.firstSpawn = false;\n      this.currentSpawnDelay = (_a = this.spawnDelay) !== null && _a !== void 0 ? _a : 0;\n      this.currentEmitDelay = (_b = this.emitDelay) !== null && _b !== void 0 ? _b : 0;\n      delta.value = 0;\n    }\n    if (this.duration !== undefined) {\n      this.currentDuration += delta.value;\n      if (this.currentDuration >= this.duration) {\n        this.pause();\n        if (this.spawnDelay !== undefined) {\n          delete this.spawnDelay;\n        }\n        if (!this.immortal) {\n          this.lifeCount--;\n        }\n        if (this.lifeCount > 0 || this.immortal) {\n          this.position = this.calcPosition();\n          this.spawnDelay = ((_c = this.emitterOptions.life.delay) !== null && _c !== void 0 ? _c : 0) * 1000 / this.container.retina.reduceFactor;\n        } else {\n          this.destroy();\n        }\n        this.currentDuration -= this.duration;\n        delete this.duration;\n      }\n    }\n    if (this.spawnDelay !== undefined) {\n      this.currentSpawnDelay += delta.value;\n      if (this.currentSpawnDelay >= this.spawnDelay) {\n        this.play();\n        this.currentSpawnDelay -= this.currentSpawnDelay;\n        delete this.spawnDelay;\n      }\n    }\n    if (this.emitDelay !== undefined) {\n      this.currentEmitDelay += delta.value;\n      if (this.currentEmitDelay >= this.emitDelay) {\n        this.emit();\n        this.currentEmitDelay -= this.emitDelay;\n      }\n    }\n  }\n  prepareToDie() {\n    var _a;\n    if (this.paused) {\n      return;\n    }\n    const duration = (_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration;\n    if (this.container.retina.reduceFactor && (this.lifeCount > 0 || this.immortal) && duration !== undefined && duration > 0) {\n      this.duration = duration * 1000;\n    }\n  }\n  destroy() {\n    this.emitters.removeEmitter(this);\n  }\n  calcPosition() {\n    var _a, _b;\n    const container = this.container;\n    const percentPosition = this.emitterOptions.position;\n    return {\n      x: ((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width,\n      y: ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height\n    };\n  }\n  emit() {\n    var _a;\n    if (this.paused) {\n      return;\n    }\n    const container = this.container;\n    const position = this.position;\n    const offset = {\n      x: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.width * this.size.width / 100 : this.size.width,\n      y: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.height * this.size.height / 100 : this.size.height\n    };\n    const quantity = Utils_1.getRangeValue(this.emitterOptions.rate.quantity);\n    for (let i = 0; i < quantity; i++) {\n      const particlesOptions = Utils_1.deepExtend({}, this.particlesOptions);\n      if (this.spawnColor !== undefined) {\n        const colorAnimation = (_a = this.emitterOptions.spawnColor) === null || _a === void 0 ? void 0 : _a.animation;\n        if (colorAnimation) {\n          const hueAnimation = colorAnimation;\n          if (hueAnimation.enable) {\n            this.spawnColor.h = this.setColorAnimation(hueAnimation, this.spawnColor.h, 360);\n          } else {\n            const hslAnimation = colorAnimation;\n            this.spawnColor.h = this.setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n            this.spawnColor.s = this.setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n            this.spawnColor.l = this.setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n          }\n        }\n        if (!particlesOptions.color) {\n          particlesOptions.color = {\n            value: this.spawnColor\n          };\n        } else {\n          particlesOptions.color.value = this.spawnColor;\n        }\n      }\n      container.particles.addParticle(randomPosition(position, offset), particlesOptions);\n    }\n  }\n  setColorAnimation(animation, initValue, maxValue) {\n    var _a;\n    const container = this.container;\n    if (!animation.enable) {\n      return initValue;\n    }\n    const colorOffset = Utils_1.randomInRange(animation.offset);\n    const delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\n    const emitFactor = 1000 * delay / container.retina.reduceFactor;\n    const colorSpeed = (_a = animation.speed) !== null && _a !== void 0 ? _a : 0;\n    return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n  }\n}\nexports.EmitterInstance = EmitterInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","EmitterInstance","Utils_1","require","Enums_1","EmitterSize_1","randomCoordinate","position","offset","Math","random","randomPosition","x","y","constructor","emitters","container","emitterOptions","_a","_b","_c","_d","_e","_f","_g","firstSpawn","currentDuration","currentEmitDelay","currentSpawnDelay","initialPosition","deepExtend","spawnDelay","life","delay","retina","reduceFactor","calcPosition","name","particlesOptions","particles","move","direction","spawnColor","undefined","colorToHsl","paused","autoPlay","size","EmitterSize","load","height","mode","SizeMode","percent","width","lifeCount","count","immortal","play","externalPlay","externalPause","pause","emitDelay","getRangeValue","rate","prepareToDie","resize","isPointInside","canvas","update","delta","duration","destroy","emit","removeEmitter","percentPosition","quantity","i","colorAnimation","animation","hueAnimation","enable","h","setColorAnimation","hslAnimation","s","l","color","addParticle","initValue","maxValue","colorOffset","randomInRange","emitFactor","colorSpeed","speed","fpsLimit"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/tsparticles/Plugins/Emitters/EmitterInstance.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EmitterInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Enums_1 = require(\"../../Enums\");\nconst EmitterSize_1 = require(\"./Options/Classes/EmitterSize\");\nfunction randomCoordinate(position, offset) {\n    return position + offset * (Math.random() - 0.5);\n}\nfunction randomPosition(position, offset) {\n    return {\n        x: randomCoordinate(position.x, offset.x),\n        y: randomCoordinate(position.y, offset.y),\n    };\n}\nclass EmitterInstance {\n    constructor(emitters, container, emitterOptions, position) {\n        var _a, _b, _c, _d, _e, _f;\n        var _g;\n        this.emitters = emitters;\n        this.container = container;\n        this.firstSpawn = true;\n        this.currentDuration = 0;\n        this.currentEmitDelay = 0;\n        this.currentSpawnDelay = 0;\n        this.initialPosition = position;\n        this.emitterOptions = Utils_1.deepExtend({}, emitterOptions);\n        this.spawnDelay = (((_a = this.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n        this.name = emitterOptions.name;\n        let particlesOptions = Utils_1.deepExtend({}, this.emitterOptions.particles);\n        particlesOptions !== null && particlesOptions !== void 0 ? particlesOptions : (particlesOptions = {});\n        (_c = particlesOptions.move) !== null && _c !== void 0 ? _c : (particlesOptions.move = {});\n        (_d = (_g = particlesOptions.move).direction) !== null && _d !== void 0 ? _d : (_g.direction = this.emitterOptions.direction);\n        if (this.emitterOptions.spawnColor !== undefined) {\n            this.spawnColor = Utils_1.colorToHsl(this.emitterOptions.spawnColor);\n        }\n        this.paused = !this.emitterOptions.autoPlay;\n        this.particlesOptions = particlesOptions;\n        this.size =\n            (_e = this.emitterOptions.size) !== null && _e !== void 0 ? _e : (() => {\n                const size = new EmitterSize_1.EmitterSize();\n                size.load({\n                    height: 0,\n                    mode: Enums_1.SizeMode.percent,\n                    width: 0,\n                });\n                return size;\n            })();\n        this.lifeCount = (_f = this.emitterOptions.life.count) !== null && _f !== void 0 ? _f : -1;\n        this.immortal = this.lifeCount <= 0;\n        this.play();\n    }\n    externalPlay() {\n        this.paused = false;\n        this.play();\n    }\n    externalPause() {\n        this.paused = true;\n        this.pause();\n    }\n    play() {\n        if (this.paused) {\n            return;\n        }\n        if (this.container.retina.reduceFactor &&\n            (this.lifeCount > 0 || this.immortal || !this.emitterOptions.life.count)) {\n            if (this.emitDelay === undefined) {\n                const delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\n                this.emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n            }\n            if (this.lifeCount > 0 || this.immortal) {\n                this.prepareToDie();\n            }\n        }\n    }\n    pause() {\n        if (this.paused) {\n            return;\n        }\n        delete this.emitDelay;\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && Utils_1.isPointInside(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    update(delta) {\n        var _a, _b, _c;\n        if (this.paused) {\n            return;\n        }\n        if (this.firstSpawn) {\n            this.firstSpawn = false;\n            this.currentSpawnDelay = (_a = this.spawnDelay) !== null && _a !== void 0 ? _a : 0;\n            this.currentEmitDelay = (_b = this.emitDelay) !== null && _b !== void 0 ? _b : 0;\n            delta.value = 0;\n        }\n        if (this.duration !== undefined) {\n            this.currentDuration += delta.value;\n            if (this.currentDuration >= this.duration) {\n                this.pause();\n                if (this.spawnDelay !== undefined) {\n                    delete this.spawnDelay;\n                }\n                if (!this.immortal) {\n                    this.lifeCount--;\n                }\n                if (this.lifeCount > 0 || this.immortal) {\n                    this.position = this.calcPosition();\n                    this.spawnDelay =\n                        (((_c = this.emitterOptions.life.delay) !== null && _c !== void 0 ? _c : 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this.destroy();\n                }\n                this.currentDuration -= this.duration;\n                delete this.duration;\n            }\n        }\n        if (this.spawnDelay !== undefined) {\n            this.currentSpawnDelay += delta.value;\n            if (this.currentSpawnDelay >= this.spawnDelay) {\n                this.play();\n                this.currentSpawnDelay -= this.currentSpawnDelay;\n                delete this.spawnDelay;\n            }\n        }\n        if (this.emitDelay !== undefined) {\n            this.currentEmitDelay += delta.value;\n            if (this.currentEmitDelay >= this.emitDelay) {\n                this.emit();\n                this.currentEmitDelay -= this.emitDelay;\n            }\n        }\n    }\n    prepareToDie() {\n        var _a;\n        if (this.paused) {\n            return;\n        }\n        const duration = (_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration;\n        if (this.container.retina.reduceFactor &&\n            (this.lifeCount > 0 || this.immortal) &&\n            duration !== undefined &&\n            duration > 0) {\n            this.duration = duration * 1000;\n        }\n    }\n    destroy() {\n        this.emitters.removeEmitter(this);\n    }\n    calcPosition() {\n        var _a, _b;\n        const container = this.container;\n        const percentPosition = this.emitterOptions.position;\n        return {\n            x: (((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100) * container.canvas.size.width,\n            y: (((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100) * container.canvas.size.height,\n        };\n    }\n    emit() {\n        var _a;\n        if (this.paused) {\n            return;\n        }\n        const container = this.container;\n        const position = this.position;\n        const offset = {\n            x: this.size.mode === Enums_1.SizeMode.percent\n                ? (container.canvas.size.width * this.size.width) / 100\n                : this.size.width,\n            y: this.size.mode === Enums_1.SizeMode.percent\n                ? (container.canvas.size.height * this.size.height) / 100\n                : this.size.height,\n        };\n        const quantity = Utils_1.getRangeValue(this.emitterOptions.rate.quantity);\n        for (let i = 0; i < quantity; i++) {\n            const particlesOptions = Utils_1.deepExtend({}, this.particlesOptions);\n            if (this.spawnColor !== undefined) {\n                const colorAnimation = (_a = this.emitterOptions.spawnColor) === null || _a === void 0 ? void 0 : _a.animation;\n                if (colorAnimation) {\n                    const hueAnimation = colorAnimation;\n                    if (hueAnimation.enable) {\n                        this.spawnColor.h = this.setColorAnimation(hueAnimation, this.spawnColor.h, 360);\n                    }\n                    else {\n                        const hslAnimation = colorAnimation;\n                        this.spawnColor.h = this.setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this.setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this.setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                }\n                if (!particlesOptions.color) {\n                    particlesOptions.color = {\n                        value: this.spawnColor,\n                    };\n                }\n                else {\n                    particlesOptions.color.value = this.spawnColor;\n                }\n            }\n            container.particles.addParticle(randomPosition(position, offset), particlesOptions);\n        }\n    }\n    setColorAnimation(animation, initValue, maxValue) {\n        var _a;\n        const container = this.container;\n        if (!animation.enable) {\n            return initValue;\n        }\n        const colorOffset = Utils_1.randomInRange(animation.offset);\n        const delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\n        const emitFactor = (1000 * delay) / container.retina.reduceFactor;\n        const colorSpeed = (_a = animation.speed) !== null && _a !== void 0 ? _a : 0;\n        return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n    }\n}\nexports.EmitterInstance = EmitterInstance;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}