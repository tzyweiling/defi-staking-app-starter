{"ast":null,"code":"/**\n * Multihash implementation in JavaScript.\n *\n * @module multihash\n */\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\nconst multibase = require('multibase');\nconst varint = require('varint');\nconst cs = require('./constants');\nexports.names = cs.names;\nexports.codes = cs.codes;\nexports.defaultLengths = cs.defaultLengths;\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\nexports.toHexString = function toHexString(hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer');\n  }\n  return hash.toString('hex');\n};\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Buffer}\n */\nexports.fromHexString = function fromHexString(hash) {\n  return Buffer.from(hash, 'hex');\n};\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\nexports.toB58String = function toB58String(hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer');\n  }\n  return multibase.encode('base58btc', hash).toString().slice(1);\n};\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Buffer} hash\n * @returns {Buffer}\n */\nexports.fromB58String = function fromB58String(hash) {\n  let encoded = hash;\n  if (Buffer.isBuffer(hash)) {\n    encoded = hash.toString();\n  }\n  return multibase.decode('z' + encoded);\n};\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Buffer} buf\n * @returns {{code: number, name: string, length: number, digest: Buffer}} result\n */\nexports.decode = function decode(buf) {\n  if (!Buffer.isBuffer(buf)) {\n    throw new Error('multihash must be a Buffer');\n  }\n  if (buf.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.');\n  }\n  const code = varint.decode(buf);\n  if (!exports.isValidCode(code)) {\n    throw new Error(\"multihash unknown function code: 0x\".concat(code.toString(16)));\n  }\n  buf = buf.slice(varint.decode.bytes);\n  const len = varint.decode(buf);\n  if (len < 0) {\n    throw new Error(\"multihash invalid length: \".concat(len));\n  }\n  buf = buf.slice(varint.decode.bytes);\n  if (buf.length !== len) {\n    throw new Error(\"multihash length inconsistent: 0x\".concat(buf.toString('hex')));\n  }\n  return {\n    code: code,\n    name: cs.codes[code],\n    length: len,\n    digest: buf\n  };\n};\n\n/**\n *  Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Buffer} digest\n * @param {string|number} code\n * @param {number} [length]\n * @returns {Buffer}\n */\nexports.encode = function encode(digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code');\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = exports.coerceCode(code);\n  if (!Buffer.isBuffer(digest)) {\n    throw new Error('digest should be a Buffer');\n  }\n  if (length == null) {\n    length = digest.length;\n  }\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.');\n  }\n  return Buffer.concat([Buffer.from(varint.encode(hashfn)), Buffer.from(varint.encode(length)), digest]);\n};\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n * @param {string|number} name\n * @returns {number}\n */\nexports.coerceCode = function coerceCode(name) {\n  let code = name;\n  if (typeof name === 'string') {\n    if (cs.names[name] === undefined) {\n      throw new Error(\"Unrecognized hash function named: \".concat(name));\n    }\n    code = cs.names[name];\n  }\n  if (typeof code !== 'number') {\n    throw new Error(\"Hash function code should be a number. Got: \".concat(code));\n  }\n  if (cs.codes[code] === undefined && !exports.isAppCode(code)) {\n    throw new Error(\"Unrecognized function code: \".concat(code));\n  }\n  return code;\n};\n\n/**\n * Checks wether a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isAppCode = function appCode(code) {\n  return code > 0 && code < 0x10;\n};\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isValidCode = function validCode(code) {\n  if (exports.isAppCode(code)) {\n    return true;\n  }\n  if (cs.codes[code]) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\nfunction validate(multihash) {\n  exports.decode(multihash); // throws if bad.\n}\nexports.validate = validate;\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\nexports.prefix = function prefix(multihash) {\n  validate(multihash);\n  return multihash.slice(0, 2);\n};","map":{"version":3,"names":["Buffer","require","multibase","varint","cs","exports","names","codes","defaultLengths","toHexString","hash","isBuffer","Error","toString","fromHexString","from","toB58String","encode","slice","fromB58String","encoded","decode","buf","length","code","isValidCode","concat","bytes","len","name","digest","undefined","hashfn","coerceCode","isAppCode","appCode","validCode","validate","multihash","prefix"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/multihashes/src/index.js"],"sourcesContent":["/**\n * Multihash implementation in JavaScript.\n *\n * @module multihash\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst cs = require('./constants')\n\nexports.names = cs.names\nexports.codes = cs.codes\nexports.defaultLengths = cs.defaultLengths\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\nexports.toHexString = function toHexString (hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer')\n  }\n\n  return hash.toString('hex')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Buffer}\n */\nexports.fromHexString = function fromHexString (hash) {\n  return Buffer.from(hash, 'hex')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Buffer} hash\n * @returns {string}\n */\nexports.toB58String = function toB58String (hash) {\n  if (!Buffer.isBuffer(hash)) {\n    throw new Error('must be passed a buffer')\n  }\n\n  return multibase.encode('base58btc', hash).toString().slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Buffer} hash\n * @returns {Buffer}\n */\nexports.fromB58String = function fromB58String (hash) {\n  let encoded = hash\n  if (Buffer.isBuffer(hash)) {\n    encoded = hash.toString()\n  }\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Buffer} buf\n * @returns {{code: number, name: string, length: number, digest: Buffer}} result\n */\nexports.decode = function decode (buf) {\n  if (!(Buffer.isBuffer(buf))) {\n    throw new Error('multihash must be a Buffer')\n  }\n\n  if (buf.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = varint.decode(buf)\n  if (!exports.isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  const len = varint.decode(buf)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${buf.toString('hex')}`)\n  }\n\n  return {\n    code: code,\n    name: cs.codes[code],\n    length: len,\n    digest: buf\n  }\n}\n\n/**\n *  Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Buffer} digest\n * @param {string|number} code\n * @param {number} [length]\n * @returns {Buffer}\n */\nexports.encode = function encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = exports.coerceCode(code)\n\n  if (!(Buffer.isBuffer(digest))) {\n    throw new Error('digest should be a Buffer')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  return Buffer.concat([\n    Buffer.from(varint.encode(hashfn)),\n    Buffer.from(varint.encode(length)),\n    digest\n  ])\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n * @param {string|number} name\n * @returns {number}\n */\nexports.coerceCode = function coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (cs.names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = cs.names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  if (cs.codes[code] === undefined && !exports.isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks wether a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isAppCode = function appCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isValidCode = function validCode (code) {\n  if (exports.isAppCode(code)) {\n    return true\n  }\n\n  if (cs.codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  exports.decode(multihash) // throws if bad.\n}\nexports.validate = validate\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Buffer} multihash\n * @returns {undefined}\n * @throws {Error}\n */\nexports.prefix = function prefix (multihash) {\n  validate(multihash)\n\n  return multihash.slice(0, 2)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}