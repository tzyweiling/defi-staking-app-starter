{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n\nconst varint = require('varint');\nconst intTable = require('./int-table');\nconst codecNameToCodeVarint = require('./varint-table');\nconst util = require('./util');\nexports = module.exports;\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix;\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode);\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return Buffer.concat([prefix, data]);\n};\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.rmPrefix = data => {\n  varint.decode(data);\n  return data.slice(varint.decode.bytes);\n};\n\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\nexports.getCodec = prefixedData => {\n  const code = varint.decode(prefixedData);\n  const codecName = intTable.get(code);\n  if (codecName === undefined) {\n    throw new Error(\"Code \".concat(code, \" not found\"));\n  }\n  return codecName;\n};\n\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\nexports.getName = codec => {\n  return intTable.get(codec);\n};\n\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\nexports.getNumber = name => {\n  const code = codecNameToCodeVarint[name];\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found');\n  }\n  return util.varintBufferDecode(code)[0];\n};\n\n/**\n * Get the code of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {number}\n */\nexports.getCode = prefixedData => {\n  return varint.decode(prefixedData);\n};\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\nexports.getCodeVarint = codecName => {\n  const code = codecNameToCodeVarint[codecName];\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found');\n  }\n  return code;\n};\n\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\nexports.getVarint = code => {\n  return varint.encode(code);\n};\n\n// Make the constants top-level constants\nconst constants = require('./constants');\nObject.assign(exports, constants);\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print');","map":{"version":3,"names":["varint","require","intTable","codecNameToCodeVarint","util","exports","module","addPrefix","multicodecStrOrCode","data","prefix","Buffer","isBuffer","varintBufferEncode","Error","concat","rmPrefix","decode","slice","bytes","getCodec","prefixedData","code","codecName","get","undefined","getName","codec","getNumber","name","varintBufferDecode","getCode","getCodeVarint","getVarint","encode","constants","Object","assign","print"],"sources":["D:/Documents/defi-staking-app-starter/defi-staking-app-starter/node_modules/multicodec/src/index.js"],"sourcesContent":["/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\nconst varint = require('varint')\nconst intTable = require('./int-table')\nconst codecNameToCodeVarint = require('./varint-table')\nconst util = require('./util')\n\nexports = module.exports\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {string|number} multicodecStrOrCode\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.addPrefix = (multicodecStrOrCode, data) => {\n  let prefix\n\n  if (Buffer.isBuffer(multicodecStrOrCode)) {\n    prefix = util.varintBufferEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return Buffer.concat([prefix, data])\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Buffer} data\n * @returns {Buffer}\n */\nexports.rmPrefix = (data) => {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {string}\n */\nexports.getCodec = (prefixedData) => {\n  const code = varint.decode(prefixedData)\n  const codecName = intTable.get(code)\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`)\n  }\n  return codecName\n}\n\n/**\n * Get the name of the codec.\n * @param {number} codec\n * @returns {string}\n */\nexports.getName = (codec) => {\n  return intTable.get(codec)\n}\n\n/**\n * Get the code of the codec\n * @param {string} name\n * @returns {number}\n */\nexports.getNumber = (name) => {\n  const code = codecNameToCodeVarint[name]\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found')\n  }\n  return util.varintBufferDecode(code)[0]\n}\n\n/**\n * Get the code of the prefixed data.\n * @param {Buffer} prefixedData\n * @returns {number}\n */\nexports.getCode = (prefixedData) => {\n  return varint.decode(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n * @param {string} codecName\n * @returns {Buffer}\n */\nexports.getCodeVarint = (codecName) => {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n * @param {Number} code\n * @returns {Array.<number>}\n */\nexports.getVarint = (code) => {\n  return varint.encode(code)\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants')\nObject.assign(exports, constants)\n\n// Human friendly names for printing, e.g. in error messages\nexports.print = require('./print')\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}